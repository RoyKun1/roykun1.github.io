<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>海上归来</title>
    <url>/2020/03/09/%E6%B5%B7%E4%B8%8A%E5%BD%92%E6%9D%A5/</url>
    <content><![CDATA[<h1 id="PS基础案例——海上归来"><a href="#PS基础案例——海上归来" class="headerlink" title="PS基础案例——海上归来"></a>PS基础案例——海上归来</h1><h2 id="案例展示"><a href="#案例展示" class="headerlink" title="案例展示"></a>案例展示</h2><p>素材<a href="https://pan.baidu.com/s/12FUpUjc2cwqHCmGNLwbNyw" target="_blank" rel="noopener">链接</a></p>
<p>提取码：mkwi</p>
<p>工具：PS2019</p>
<h2 id="抠图"><a href="#抠图" class="headerlink" title="抠图"></a>抠图</h2><ul>
<li><p>女王</p>
<ol>
<li><p>使用快速选择工具选出人物主体</p>
</li>
<li><p>新建蒙版</p>
</li>
<li><p>边缘部分可以使用黑色笔刷（前景黑色画笔）擦除，但我们发现还是会有一些黑色痕迹</p>
</li>
<li><p>双击进入蒙版勾选<strong>净化颜色</strong></p>
</li>
<li><p>按住<code>ctrl</code>键单击图层缩览图，使用画笔工具吸取羽毛其他部分颜色涂抹痕迹部分</p>
</li>
<li><p>将缩览图转换为智能对象（使用净化颜色后多出复制图层且不再是智能对象，可以复制最上方图层，删除蒙版，变换为智能对象，将下面的蒙版移上去），最后效果如下：</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/PSImages/1.png" alt=""></p>
</li>
</ol>
</li>
<li><p>添加海浪</p>
<ol>
<li><code>ctrl+T</code>自由变换调整比例</li>
<li><code>ctrl+J</code>复制该图层，水平翻转并调整比例，不显得对称即可</li>
<li>添加图层蒙版，前景色黑色，使用画笔工具在接缝处涂抹</li>
<li>使用仿制图章工具将翅膀处的白色海浪去除</li>
</ol>
</li>
<li><p>添加大地</p>
<ol>
<li>放置在最下层，给海洋添加蒙版，擦除人物两侧部分</li>
</ol>
</li>
<li><p>添加海洋边缘效果</p>
<ol>
<li><p>降低不透明度，使用自由变换工具中的变形，调整海岸边与海洋边缘大致重合</p>
</li>
<li><p>放在人物图层下方，新建黑色蒙版，擦出边缘部分（白色画笔）</p>
</li>
<li><p>添加曲线调整图层，建立剪切蒙版，降低整体明度；绿色通道，添加绿色成分</p>
</li>
<li><p>调整一下蒙版边缘，自由变换水平翻转到另一边</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/PSImages/2.png" alt=""></p>
</li>
</ol>
</li>
<li><p>添加动物</p>
<ol>
<li>使用<code>选择——主体</code>功能，对于边缘部分可以使用净化颜色，也可以新建纯色图层查看效果</li>
<li>大象可以快速选择白色部分，然后<code>ctrl+i</code>反选，放置在后面压住亮色</li>
</ol>
</li>
<li><p>统一明度</p>
<ol>
<li><p>最上方新建黑白图层，可以看出明暗关系</p>
</li>
<li><p>让地面、大象和海浪暗一些，选择地面添加<code>色阶</code>调整图层</p>
</li>
<li><p>将海浪合并为一组调整</p>
</li>
<li><p>可以使用黑色蒙版让效果只在部分显示</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/PSImages/5.png" alt=""></p>
</li>
</ol>
</li>
<li><p>调整饱和度</p>
<p>任何物体处于这个环境当中时，色调会受到环境影响而出现色彩倾向</p>
<ol>
<li>上方新建纯色图层，<code>S</code>值为100，模式为饱和度</li>
<li>可以看出画面主体部分偏暖</li>
<li>在相应图层上新建曲线调整图层，蓝色通道向上拖动，如果发红，在红色通道向上拖动</li>
<li>可以双击曲线图层，在图层样式中将亮暗通道分开调整</li>
</ol>
</li>
<li><p>添加投影</p>
<ol>
<li><p>复制图层（比如熊），双击进入图层选择<strong>颜色叠加</strong>吸取地面深色部分</p>
</li>
<li><p>自由变换，垂直翻转，调整投影位置，降低不透明度</p>
</li>
<li><p>上方新建图层，吸取地面颜色，加深脚步投影</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/PSImages/7.png" alt=""></p>
</li>
</ol>
</li>
<li><p>最后调整主题的位置关系即可</p>
</li>
<li><p>哈哈就是玩玩！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Show</category>
      </categories>
      <tags>
        <tag>PS</tag>
      </tags>
  </entry>
  <entry>
    <title>How-to-use-Hexo</title>
    <url>/2020/02/12/How-to-use-Hexo/</url>
    <content><![CDATA[<h1 id="使用python和github搭建个人博客"><a href="#使用python和github搭建个人博客" class="headerlink" title="使用python和github搭建个人博客"></a>使用python和github搭建个人博客</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>作为学习PythonWeb的入门，依托github搭建个人博客，以后的项目代码和笔记均托管在这里。由于静态网站加载快易被搜索引擎检索到，我们使用hexo(a fast simple&amp;powerful blog framework)搭建框架。</li>
</ul>
<h2 id="二、站点搭建"><a href="#二、站点搭建" class="headerlink" title="二、站点搭建"></a>二、站点搭建</h2><h3 id="1-git-amp-GitHub"><a href="#1-git-amp-GitHub" class="headerlink" title="1. git &amp; GitHub"></a>1. git &amp; GitHub</h3><ul>
<li>系统学习了git，自己的github账号：</li>
</ul>
<blockquote>
<p><a href="https://github.com/RoyKun1" target="_blank" rel="noopener">https://github.com/RoyKun1</a></p>
</blockquote>
<ul>
<li>搭建网站需要建立名为/roykun1.github.io的git仓库，可以访问：</li>
</ul>
<blockquote>
<p><a href="https://roykun1.github.io/" target="_blank" rel="noopener">https://roykun1.github.io/</a></p>
</blockquote>
<h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2. Hexo"></a>2. Hexo</h3><blockquote>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p>
</blockquote>
<ul>
<li>可以参考这个教程学习：</li>
</ul>
<blockquote>
<p><a href="https://blog.csdn.net/u011475210/article/details/79023429#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener">https://blog.csdn.net/u011475210/article/details/79023429#%E5%89%8D%E8%A8%80</a></p>
</blockquote>
<h4 id="ensp-ensp-Hexo的优点"><a href="#ensp-ensp-Hexo的优点" class="headerlink" title="&ensp;&ensp;Hexo的优点"></a>&ensp;&ensp;Hexo的优点</h4><ul>
<li>支持Markdown格式</li>
<li>有众多优秀插件和主题</li>
<li>文档完善</li>
</ul>
<h4 id="ensp-ensp-安装和使用"><a href="#ensp-ensp-安装和使用" class="headerlink" title="&ensp;&ensp;安装和使用"></a>&ensp;&ensp;安装和使用</h4><ul>
<li><p>安装node.js</p>
<ol>
<li><p>官网下载：<br><code>https://nodejs.org/en/download/</code></p>
</li>
<li><p>选择LTS版本，选择偶数的NodeJS版本，例如：8、10，因为偶数是长期稳定版本，有较好的兼容性。</p>
</li>
<li><p>双击运行安装包，其他默认就好</p>
</li>
<li><p>查看版本： win R; node -v    <code>10.16.3</code></p>
</li>
<li><p>新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理</p>
</li>
<li><p>需要进行一些环境变量的配置：<code>https://blog.csdn.net/cai454692590/article/details/86093297</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](https:&#x2F;&#x2F;i.imgur.com&#x2F;z9Cnjew.png)</span><br><span class="line">由于markdown的国内服务器好像被屏蔽，需要翻q才能显示</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>安装hexo</p>
<ol>
<li>在git bash中使用命令： <code>npm install -g hexo-cli</code></li>
<li>查看是否安装成功：<code>hexo -v</code> 在bash中command not found，但是在cmd中是可以的<br>解决这个问题：使用管理员身份运行git bash</li>
</ol>
</li>
<li><p>使用hexo新建站点</p>
<ol>
<li><p>新建目录githubBlog</p>
</li>
<li><p>使用命令：<code>hexo init ./githubBlog</code> 由于bash有问题，在cmd中执行；执行成功会显示<code>INFO  Start blogging with Hexo!</code></p>
</li>
<li><p>进入目录，执行命令：<br><code>npm install</code>或者<code>sudo npm install</code></p>
</li>
<li><p>启动服务：<code>hexo server</code><br>会有提示信息：<code>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code><br>我们访问这个地址即可看到hexo为我们初始化的界面！</p>
</li>
<li><p>将代码上传到github站点<br>首先要清空之前的上传：<br>&ensp;&ensp;<code>settings-&gt;delete repository</code><br>在githubBlog目录下安装一个插件：<br>&ensp;&ensp;<code>npm i -save hexo-deployer-git</code><br>在生成的文件_config.yml最后写入如下代码：</p>
<pre><code>deploy:
    type: git
    repo: https://github.com/RoyKun1/roykun1.github.io
    branch: master  </code></pre><p>在目录下执行：<br>&ensp;&ensp;<code>hexo d -g</code><br>进入隐藏目录：.deploy_git，声明github账号：由于我们已经在本地生成了密钥传至github，所以此时已经将代码传至，使用 <code>https://roykun1.github.io</code> 访问      </p>
</li>
<li><p>新建文章<br>使用命令： <code>hexo new &quot;我的第一篇博客&quot;</code> ，出现信息： <code>INFO  Created: D:\gitwork\githubBlog\source\_posts\我的第一篇博客.md</code></p>
</li>
<li><p>更换主题<br>官方主题：<code>https://hexo.io/themes/</code><br>如果我们喜欢其他的主题比如：<code>https://github.com/CodeDaraW/Hacker</code> 将源码下载到本地直接放在themes目录下面；然后执行 <code>hexo clean</code> 清楚缓存；再使用 <code>hexo d -g</code> 上传部署即可  </p>
<ul>
<li>注：可能需要等一会儿样式才会刷新出来，并不需要将themes进行add/commit<br>我们可以使用next定义博客的风格样式：<br><code>http://theme-next.iissnan.com/third-party-services.html</code></li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="三、编写个人博客"><a href="#三、编写个人博客" class="headerlink" title="三、编写个人博客"></a>三、编写个人博客</h2><blockquote>
<p>使用命令：<code>hexo new &quot;title&quot;</code>即可创建文章，一般在source/_post文件夹下<br>头部包含时间、标签，可以修改<br>编辑好文章后使用<code>hexo clean</code>和<code>hexo d -g</code>提交即可</p>
</blockquote>
<p>注：使用hexo命令，这里没有建立git的分支，所以不能使用<code>git remote add</code>和<code>git push</code>&gt; </p>
<blockquote>
<p>我们使用Typora拖进来的图片需要通过PicGo上传到github图床，由于hexo对站点的保护，</p>
<p>新建仓库将文件放在ImageUploads仓库下</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImage1.jpg" alt=""></p>
<ul>
<li>关于在github上修改文件</li>
</ul>
<blockquote>
<p>新建文件夹：点击<code>create new file</code>，输入文件名后 带上<code>/</code>，由于不能为空文件夹，可任意创建一个readme.md文件。</p>
<p>删除文件或文件夹：不能直接删除，使用：</p>
<p><code>git clone https://github.com/RoyKun1/ImageUploads.git</code>将仓库克隆到本地</p>
<p>删除文件或文件夹，使用：</p>
<p><code>git rm --cached filename</code> 本地又需要使用, 只是不希望这个文件被版本控制</p>
<p><code>git add *</code></p>
<p><code>git commit -m &#39;delete folder&#39;</code></p>
<p><code>git push -u origin master</code></p>
<p>上传到远程仓库即可</p>
</blockquote>
<h2 id="四、自定义博客样式"><a href="#四、自定义博客样式" class="headerlink" title="四、自定义博客样式"></a>四、自定义博客样式</h2><ul>
<li>使用hexo+<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next</a>自定义博客样式</li>
<li>可以参考这篇设置<a href="https://www.jianshu.com/p/efbeddc5eb19" target="_blank" rel="noopener">说明</a></li>
<li>如果你还想添加其他的样式，只需在百度搜索hexo+next，各种大神操作！</li>
</ul>
]]></content>
      <categories>
        <category>Show</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2020/01/07/Python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h1><ul>
<li>这里将Python常用的基础知识整理回顾，实践出真知</li>
<li>IDE使用PyCharm</li>
</ul>
<h2 id="Python基操"><a href="#Python基操" class="headerlink" title="Python基操"></a>Python基操</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mystr = <span class="string">'RoyKun'</span></span><br><span class="line">result = mystr.index(<span class="string">'R'</span>)   <span class="comment"># 获取字符索引，没找到会崩溃</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = mystr.find(<span class="string">'k'</span>)   <span class="comment"># 获取字符索引，如果没找到返回-1</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = mystr.count(<span class="string">'u'</span>)   <span class="comment"># 字符出现的个数</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = len(mystr)     <span class="comment"># 返回字符串长度</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = mystr.replace(<span class="string">'u'</span>,<span class="string">'n'</span>)     <span class="comment"># 字符替换</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">mystr = <span class="string">'apple,pear,orange'</span></span><br><span class="line">result = mystr.split(<span class="string">','</span>)    <span class="comment"># 分割数据</span></span><br><span class="line">print(result)   <span class="comment"># ['apple', 'pear', 'orange']</span></span><br><span class="line"></span><br><span class="line">mystr = <span class="string">'aabccb'</span></span><br><span class="line">result = mystr.partition(<span class="string">'b'</span>)<span class="comment"># 以指定字符串分割为3部分</span></span><br><span class="line">print(result)   <span class="comment"># ('aa', 'b', 'ccb')</span></span><br><span class="line"></span><br><span class="line">myurl = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">result = myurl.startswith(<span class="string">'http'</span>)   <span class="comment"># 是否以指定数据开头</span></span><br><span class="line">print(result)   <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">myurl = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">result = myurl.endswith(<span class="string">'xxx'</span>)   <span class="comment"># 是否以指定数据开头</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">mystr = <span class="string">'k'</span></span><br><span class="line">result = mystr.join(<span class="string">'Roy'</span>)  <span class="comment"># 以指定字符串拼接数据</span></span><br><span class="line">print(result)   <span class="comment"># Rkoky</span></span><br><span class="line"></span><br><span class="line">mystr = <span class="string">' Roy '</span></span><br><span class="line">result = mystr.strip(<span class="string">' '</span>)   <span class="comment"># 去除两边指定字符</span></span><br><span class="line"><span class="comment"># result = mystr.lstrip(' ')</span></span><br><span class="line"><span class="comment"># result = mystr.rstrip(' ')</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h3 id="常见数据类型及操作"><a href="#常见数据类型及操作" class="headerlink" title="常见数据类型及操作"></a>常见数据类型及操作</h3><ul>
<li>IDE中会有操作提示</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表：以中括号表现形式的数据集合，可以放任意类型的数据</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="string">'app'</span>, <span class="literal">True</span>]</span><br><span class="line">print(type(my_list))    <span class="comment"># &lt;class 'list'&gt;</span></span><br><span class="line">print(my_list[<span class="number">-2</span>])      <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">my_list.append(<span class="string">'Roy'</span>)   <span class="comment"># 追加数据</span></span><br><span class="line">my_list.insert(<span class="number">1</span>, <span class="string">'kun'</span>)    <span class="comment"># 指定位置插入数据</span></span><br><span class="line"></span><br><span class="line">mylist2 = [<span class="string">'watermelon'</span>, <span class="string">'草莓'</span>]</span><br><span class="line">my_list.extend(mylist2)     <span class="comment"># 添加列表元素（扩展）</span></span><br><span class="line">print(my_list)</span><br><span class="line"></span><br><span class="line">my_list.remove(<span class="string">'草莓'</span>)    <span class="comment"># 删除指定严肃</span></span><br><span class="line"><span class="keyword">del</span> my_list[<span class="number">0</span>]      <span class="comment"># 根据下标删除元素</span></span><br><span class="line"></span><br><span class="line">result = my_list.pop(<span class="number">1</span>)  <span class="comment"># 删除数据并返回数据值，默认删除 -1</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表生成式</span></span><br><span class="line">my_list = [value <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line">print(my_list)  <span class="comment"># [1, 2, 3, 4, 5]</span></span><br><span class="line">my_list = [value+<span class="string">"Hello"</span> <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'ab'</span>,<span class="string">'abc'</span>]]</span><br><span class="line">print(my_list)</span><br><span class="line">my_list = [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">4</span>)]</span><br><span class="line">print(my_list)  <span class="comment"># [(1, 2), (1, 3), (2, 2), (2, 3)]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元祖：以小括号形式表现的数据集合，可以存任意类型的数据</span></span><br><span class="line"><span class="comment"># 不能对元祖进行数据修改</span></span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">'Roy'</span>,[<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(my_tuple)</span><br><span class="line"><span class="comment"># my_tuple[0] = 2   # 不能直接修改</span></span><br><span class="line">list1 = my_tuple[<span class="number">3</span>]</span><br><span class="line">list1[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">print(list1)    <span class="comment"># 可以修改其中的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果只有一个元素需要添加逗号，不然会判断为其他类型</span></span><br><span class="line">my_tuple2 = (<span class="number">1</span>,)</span><br><span class="line">print(type(my_tuple2))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典：以大括号形式表现的数据集合，元素使用键值对表示</span></span><br><span class="line"><span class="comment"># 字典中的数据是无序的（输出顺序不定）</span></span><br><span class="line">my_dict = &#123;<span class="string">'name'</span>:<span class="string">'Roy'</span>, <span class="string">'age'</span>:<span class="number">18</span>, <span class="string">'hobby'</span>:<span class="string">'fuck'</span>&#125;</span><br><span class="line">print(my_dict)</span><br><span class="line">result = my_dict.pop(<span class="string">'age'</span>) <span class="comment"># 删除元素，必须指定key</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集合set：以大括号表示的数据集合，无序，且不能重复</span></span><br><span class="line">my_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="string">'Roy'</span>&#125;</span><br><span class="line">print(type(my_set))     <span class="comment"># &lt;class 'set'&gt;</span></span><br><span class="line"></span><br><span class="line">my_set.remove(<span class="number">1</span>)    <span class="comment"># 删除指定元素，元素必须存在否则报错</span></span><br><span class="line">print(my_set)</span><br><span class="line">my_set.discard(<span class="string">'Roy'</span>)   <span class="comment"># 不报错</span></span><br><span class="line">print(my_set)</span><br><span class="line"></span><br><span class="line">my_set2 = set()     <span class="comment"># 若没有元素时</span></span><br><span class="line">print(type(my_set2))</span><br><span class="line"></span><br><span class="line">my_set2.add(<span class="string">'666'</span>)</span><br><span class="line">print(my_set2)</span><br><span class="line"><span class="comment"># 无序，也就是说不能根据下标进行操作</span></span><br></pre></td></tr></table></figure>

<ul>
<li>列表、元素、集合都叫做数据容器，可以相互转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">my_tuple = (<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">my_set = &#123;<span class="string">'name'</span>, <span class="string">'age'</span>&#125;</span><br><span class="line"><span class="comment"># 列表转集合</span></span><br><span class="line">result = set(my_list)   <span class="comment"># 会对元素去重</span></span><br><span class="line"><span class="comment"># 元祖转集合</span></span><br><span class="line">result = set(my_tuple)</span><br><span class="line"><span class="comment"># 列表转元祖</span></span><br><span class="line">result = tuple(my_list)</span><br><span class="line"><span class="comment"># 集合转元祖</span></span><br><span class="line">result = tuple(my_set)</span><br><span class="line"><span class="comment"># 集合转列表</span></span><br><span class="line">result = list(my_set)</span><br><span class="line"><span class="comment"># 元祖转列表</span></span><br><span class="line">result = list(my_tuple)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>enumerate()</code>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列<br>也是后面拆包的常用操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate([<span class="string">'apple'</span>, <span class="string">'banana'</span>]):</span><br><span class="line">	print(index,value)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 针对字典</span></span><br><span class="line">my_dict = &#123;<span class="string">'name'</span>:<span class="string">'Roy'</span>, <span class="string">'age'</span>:<span class="number">18</span>, <span class="string">'hobby'</span>:<span class="string">'fuck'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> my_dict.items():</span><br><span class="line">	print(key,value)</span><br></pre></td></tr></table></figure>

<h3 id="函数相关操作"><a href="#函数相关操作" class="headerlink" title="函数相关操作"></a>函数相关操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不定长参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(a, b, *args, **kwargs)</span>:</span><span class="comment"># a,b是必传参数</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, name = <span class="string">"hello"</span>, age = <span class="number">20</span>)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># (3, 4)    元祖封装</span></span><br><span class="line"><span class="comment"># &#123;'name': 'hello', 'age': 20&#125;  字典封装</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归函数：传递回归，即在函数内部再次调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_num</span><span class="params">(num)</span>:</span>   <span class="comment"># 计算阶乘</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:    <span class="comment"># 结束递归的条件（必须有）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num * cal_num(num<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">cal_num(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">result = sys.getrecursionlimit()    <span class="comment"># 获取最大递归次数</span></span><br><span class="line">print(result)   <span class="comment"># 1000</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">1100</span>)     <span class="comment"># 设置最大递归次数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匿名函数：没有名称的函数</span></span><br><span class="line"><span class="comment"># 由于这个函数只在这里用一下，所以没有必要使用def定义，可以简化代码</span></span><br><span class="line">func = <span class="keyword">lambda</span> x,y: x+y      <span class="comment"># 前面是参数；后面只能写一句表达式，返回计算结果</span></span><br><span class="line">result = func(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">func1 = <span class="keyword">lambda</span> num: <span class="literal">True</span> <span class="keyword">if</span> num%<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span>	<span class="comment"># 判断奇偶</span></span><br><span class="line">print(func1(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">list2 = [&#123;<span class="string">'name'</span>:<span class="string">'roy'</span>,<span class="string">'age'</span>:<span class="number">22</span>&#125;,&#123;<span class="string">'name'</span>:<span class="string">'kun'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;]   <span class="comment"># 对字典列表进行排序</span></span><br><span class="line">list2.sort(key=<span class="keyword">lambda</span> item: item[<span class="string">'age'</span>])	<span class="comment"># reverse=</span></span><br><span class="line">print(list2)	<span class="comment"># item代表列表中的每个字典，sort函数内部循环获取所有age值排序</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 高阶函数</span></span><br><span class="line"><span class="comment"># 参数是函数或者返回函数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(new_func)</span>:</span></span><br><span class="line">    new_func()  <span class="comment"># 调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'内部函数'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'我作为函数参数'</span>)</span><br><span class="line">func = test(show)</span><br></pre></td></tr></table></figure>

<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 闭包</span></span><br><span class="line"><span class="comment"># 函数嵌套时，内部函数使用外部函数的参数或变量，并且返回这个内部函数，叫做闭包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exfunc</span><span class="params">(msg,num)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refunc</span><span class="params">()</span>:</span></span><br><span class="line">        print(msg*num)</span><br><span class="line">    <span class="keyword">return</span> refunc   <span class="comment"># 注意不带括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包的好处是可以根据参数得到新函数，适应不同需求</span></span><br><span class="line">func = exfunc(<span class="string">'roy'</span>,<span class="number">2</span>)</span><br><span class="line">func()</span><br><span class="line">print(func)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器本质上是一个函数，可以对原函数的功能进行扩展，不影响原函数的定义和调用</span></span><br><span class="line"><span class="comment"># 我们也可以充分发挥闭包的作用，根据参数返回装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>    <span class="comment"># 通用装饰器：可以修饰带参数的和不带参数的函数，有返回值的和无返回值的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'这是对被装饰函数扩展的操作'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)    <span class="comment"># 需要设置原函数的参数，对于有返回值的函数需要return</span></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator  # 语法糖，相当于执行 test = decorator(test) 接收闭包，扩展了原函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(num1,num2)</span>:</span></span><br><span class="line">    print(num1 + num2)</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum2</span><span class="params">(num1,num2)</span>:</span></span><br><span class="line">    result = num1 + num2</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">result = sum2(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator  # 语法糖，相当于执行 test = decorator(test) 接收闭包，扩展了原函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Roy'</span>)</span><br><span class="line">test()  <span class="comment"># 这里函数不带有参数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>切片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">'RoyKun'</span></span><br><span class="line">result = str[<span class="number">0</span>:<span class="number">5</span>:<span class="number">1</span>] <span class="comment"># 起始下标：结束下标：步长 （不包含结束下标）</span></span><br><span class="line">print(result)   <span class="comment"># RoyKu</span></span><br><span class="line"></span><br><span class="line">result = str[<span class="number">-1</span>:<span class="number">-4</span>:<span class="number">-1</span>]  <span class="comment"># nuK</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li>主要用到<code>open</code>函数和<code>os</code>包</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取键盘输入</span></span><br><span class="line"><span class="comment"># Python提供了两个内置函数从标准输入读入一行文本</span></span><br><span class="line">str = raw_input(<span class="string">"请输入："</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"你输入的内容是: "</span>, str</span><br><span class="line"></span><br><span class="line">str = input(<span class="string">"请输入："</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"你输入的内容是: "</span>, str</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件使用open函数</span></span><br><span class="line">fileObject = open(<span class="string">'1.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>)<span class="comment"># 在Windows上使用utf-8编码格式</span></span><br><span class="line"><span class="comment"># 使用open函数相当于创建了一个file对象，包含常用方法：</span></span><br><span class="line">fileObject.write(string)	<span class="comment"># 写入字符串</span></span><br><span class="line">fileObject.read([count])	<span class="comment"># 读取文件内容 参数count是要从已打开文件中读取的字节计数</span></span><br><span class="line">position = fileObject.tell() <span class="comment"># 查找当前位置</span></span><br><span class="line">fileObject.close()	<span class="comment"># 关闭对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在python3中默认支持中文编码，也可以在代码首行使用：</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 指定编码格式</span></span><br><span class="line"><span class="comment"># 使用'b'模式时，不需要指定编码格式，同时读取数据需要使用decode()解码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其他方法</span></span><br><span class="line"><span class="comment"># 刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入</span></span><br><span class="line">file.flush()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取整行，包括 "\n" 字符</span></span><br><span class="line">file.readline([size])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取所有行并返回列表，若给定sizeint&gt;0，则是设置一次读多少字节，这是为了减轻读取压力</span></span><br><span class="line">file.readlines([sizeint])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取文件，截取的字节通过size指定，默认为当前文件位置</span></span><br><span class="line">file.truncate([size])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件读取指针到指定位置</span></span><br><span class="line">file.seek(offset[, whence])</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对于打开文件的模式总结如下图：</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/Python/fileMode.png" alt=""></p>
</li>
<li><p>文件对象还包含以下属性：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">file.closed</td>
<td align="left">返回true如果文件已被关闭，否则返回false。</td>
</tr>
<tr>
<td align="left">file.mode</td>
<td align="left">返回被打开文件的访问模式。</td>
</tr>
<tr>
<td align="left">file.name</td>
<td align="left">返回文件的名称。</td>
</tr>
<tr>
<td align="left">file.softspace</td>
<td align="left">如果用print输出后，必须跟一个空格符，则返回false。否则返回true。</td>
</tr>
</tbody></table>
<ul>
<li>os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重命名文件test1.txt到test2.txt。</span></span><br><span class="line">os.rename( <span class="string">"test1.txt"</span>, <span class="string">"test2.txt"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">os.remove(file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新目录</span></span><br><span class="line">os.mkdir(<span class="string">"newdir"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录改为"/home/newdir"</span></span><br><span class="line">os.chdir(<span class="string">"/home/newdir"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前的工作目录</span></span><br><span class="line">os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录，它的所有内容应该先被清除</span></span><br><span class="line">os.rmdir(<span class="string">'dirname'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="json序列化"><a href="#json序列化" class="headerlink" title="json序列化"></a>json序列化</h3><ul>
<li><p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，它基于ECMAScript的一个子集</p>
</li>
<li><p>使用 <code>json</code> 模块来对 JSON 数据进行编解码，主要包括</p>
<ol>
<li><code>json.dumps()</code> 对数据进行编码</li>
<li><code>json.loads()</code>对数据进行解码</li>
</ol>
</li>
<li><p>Python 编码为 JSON 类型转换对应表：</p>
<table>
<thead>
<tr>
<th align="left">Python</th>
<th align="left">JSON</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dict</td>
<td align="left">object</td>
</tr>
<tr>
<td align="left">list, tuple</td>
<td align="left">array</td>
</tr>
<tr>
<td align="left">str</td>
<td align="left">string</td>
</tr>
<tr>
<td align="left">int, float, int- &amp; float-derived Enums</td>
<td align="left">number</td>
</tr>
<tr>
<td align="left">True</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">False</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">None</td>
<td align="left">null</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li>类、继承、部分特殊方法等需要了解掌握</li>
<li>可参看菜鸟教程，过一遍就OK：</li>
</ul>
<p><code>https://www.runoob.com/python3/python3-class.html</code></p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li><p>常见的异常处理方法：</p>
<ol>
<li>使用<code>try/except</code>：检测try语句块中的错误，从而让except语句捕获异常信息并处理</li>
<li>可以使用<code>raise</code>语句自己触发异常</li>
<li>异常可以是python标准异常，也可以继承并自定义</li>
</ol>
</li>
<li><p>参看<a href="https://www.runoob.com/python/python-exceptions.html" target="_blank" rel="noopener">教程</a>，过一遍即可</p>
</li>
</ul>
<h3 id="自定义包-模块"><a href="#自定义包-模块" class="headerlink" title="自定义包/模块"></a>自定义包/模块</h3><ul>
<li><p>大型的程序需要自定义很多的包，既增强代码的可读性，也便于维护</p>
</li>
<li><p><a href="https://www.runoob.com/python3/python3-module.html" target="_blank" rel="noopener">教程</a></p>
</li>
<li><p>需要注意：</p>
<ol>
<li><code>__name__属性</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果我们想在模块被引入时，模块中的某一程序块不执行，我们可以用__name__属性，使该程序块仅在该模块自身运行时执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Filename: using_name.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   print(<span class="string">'程序自身在运行'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   print(<span class="string">'我来自另一模块'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ python using_name.py</span><br><span class="line">程序自身在运行</span><br><span class="line"></span><br><span class="line">$python</span><br><span class="line">&gt;&gt;&gt; import using_name</span><br><span class="line">我来自另一模块</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li><p>迭代器是访问集合元素的一种方式，对于可以使用for循环遍历的类型（字典、列表、字符串等）都可以迭代</p>
</li>
<li><p>有两个基本的方法：<code>iter()</code> 和 <code>next()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果可以查看到 __iter__ 方法，即是可迭代对象</span></span><br><span class="line">result = dir([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">isinstance (a,int)	<span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>把一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__</code>与 <code>__next__</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span> <span class="comment"># 返回一个特殊的迭代器对象</span></span><br><span class="line">    self.a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span> <span class="comment"># 返回下一个迭代器对象</span></span><br><span class="line">    x = self.a</span><br><span class="line">    self.a += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">myclass = MyIterator()</span><br><span class="line">myiter = iter(myclass)	<span class="comment"># 迭代变量在___iter__中，必须使用iter()方法</span></span><br><span class="line"></span><br><span class="line">print(next(myiter))	<span class="comment"># 1</span></span><br><span class="line">print(next(myiter)) <span class="comment"># 2</span></span><br><span class="line">print(next(myiter)) <span class="comment"># 3</span></span><br><span class="line">print(next(myiter)) <span class="comment"># 4</span></span><br><span class="line">print(next(myiter)) <span class="comment"># 5</span></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">        self.current_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#  返回一个特殊的迭代器对象</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.current_index &lt; len(self.list1):</span><br><span class="line">            <span class="comment"># 返回下一个迭代器对象</span></span><br><span class="line">            x = self.list1[self.current_index]</span><br><span class="line">            self.current_index += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line">myiter = MyIterator() <span class="comment"># 实例化迭代器</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> myiter:  <span class="comment"># for循环就是这么强大:不用next也不用raise异常啊啊啊</span></span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure>

<ul>
<li>迭代器和生成器的好处是：根据需要每次生成一个值，相当于保存了之前的状态下次继续而不是从头开始，节省内存</li>
</ul>
</li>
</ul>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul>
<li><p>生成器是特殊的迭代器</p>
</li>
<li><p>生成器的创建有两种方式</p>
<ol>
<li>使用类似列表生成器</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>))	<span class="comment"># 换成小括号</span></span><br><span class="line">value = next(result)	<span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<code>yield</code>创建生成器</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">'before'</span>)	<span class="comment"># 例如：在深度学习项目中将数据加载部分放在这，每次只会将一部分数据拉进内存，节省消耗</span></span><br><span class="line">        <span class="keyword">yield</span> i		<span class="comment"># 每次迭代在这里暂停，下次迭代继续执行</span></span><br><span class="line">        print(<span class="string">'after'</span>)</span><br><span class="line"></span><br><span class="line">gene = func()</span><br><span class="line">print(next(gene))	<span class="comment"># 或者使用for循环输出</span></span><br></pre></td></tr></table></figure>

<p>注：迭代器和生成器的迭代只能往后不能往前</p>
</li>
</ul>
<h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><ul>
<li>使用<code>threading</code>创建子线程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(num1)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        print(num1)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        print(str)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        print(<span class="string">'主线程'</span>,i)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    thread = threading.Thread(target=func1, args=(<span class="number">555</span>,))    <span class="comment"># 元祖形式传参</span></span><br><span class="line">    thread2 = threading.Thread(target=func3, kwargs=&#123;<span class="string">'str'</span>:<span class="string">'roy'</span>&#125;)</span><br><span class="line">    thread.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    func2()     <span class="comment"># 主线程一般放在后面，不然会先执行完主进程</span></span><br></pre></td></tr></table></figure>

<ul>
<li>主线程一般会等待子线程结束再退出</li>
<li>可以通过设置守护线程，主线程结束即全部退出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    thread = threading.Thread(target=func1, args=(<span class="number">555</span>,))    <span class="comment"># 元祖形式传参</span></span><br><span class="line">    thread2 = threading.Thread(target=func3, kwargs=&#123;<span class="string">'str'</span>:<span class="string">'roy'</span>&#125;)<span class="comment"># 字典形式</span></span><br><span class="line">    <span class="comment"># 守护进程</span></span><br><span class="line">    thread.setDaemon(<span class="literal">True</span>)  </span><br><span class="line">    thread.start()</span><br><span class="line">    <span class="comment"># 必须都设置守护线程才会在主线程结束时退出</span></span><br><span class="line">    thread2.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    thread2.start()</span><br><span class="line">    func2()</span><br></pre></td></tr></table></figure>

<ul>
<li>互斥锁——线程同步</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多个线程之间同时操作全局变量就会出问题，需要上锁</span></span><br><span class="line">lock = threading.Lock()     <span class="comment"># 互斥锁</span></span><br><span class="line">arr = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lockfunc1</span><span class="params">()</span>:</span></span><br><span class="line">    lock.acquire()	<span class="comment"># 锁住</span></span><br><span class="line">    <span class="keyword">global</span> arr		<span class="comment"># 需要拿到全局变量arr</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">        arr += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'进程1：'</span>,arr)</span><br><span class="line">    lock.release()	<span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lockfunc2</span><span class="params">()</span>:</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">global</span> arr</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">400</span>):</span><br><span class="line">        arr += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'进程2：'</span>,arr)</span><br><span class="line">    lock.release()</span><br></pre></td></tr></table></figure>

<ul>
<li>每创建一个进程操作系统都会分配运行资源，真正干活的是线程，每个进程会默认创建一个线程</li>
<li>多进程需要多个CPU核，而多线程是在一个核里进行资源调度，可以结合并行并发的概念理解</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(num1)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        print(num1)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">18</span>):</span><br><span class="line">        print(str)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	multi1 = multiprocessing.Process(target=func1)</span><br><span class="line">    multi2 = multiprocessing.Process(target=func2)<span class="comment"># 每个进程自带一个线程</span></span><br><span class="line">    multi1.start()</span><br><span class="line">    multi2.start()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>类似的可以使用守护进程退出子进程</p>
</li>
<li><p>也可以使用<code>Precess.terminate()</code>终止</p>
</li>
<li><p>进程之间是独立的，不共享全局变量</p>
</li>
<li><p>那么进程之间如何通信呢？消息队列</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">queue = multiprocessing.Queue(<span class="number">3</span>)    <span class="comment"># 默认可以存任意多数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Queue模块中常用到的方法<ol>
<li>Queue.qsize() 返回队列的大小</li>
<li>Queue.empty() 如果队列为空，返回True,反之False</li>
<li>Queue.full() 如果队列满了，返回True,反之False</li>
<li>Queue.full 与 maxsize 大小对应</li>
<li>Queue.get([block[, timeout]])获取队列，timeout等待时间</li>
<li>Queue.get_nowait() 相当Queue.get(False)</li>
<li>Queue.put(item) 写入队列，timeout等待时间</li>
<li>Queue.put_nowait(item) 相当Queue.put(item, False)</li>
<li>Queue.task_done() 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li>
<li>Queue.join() 实际上意味着等到队列为空，再执行别的操作</li>
</ol>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>还有一些常见的操作比如Python连接数据库、解析XML数据等，可以结合项目学习加深理解。每一门语言都是一个完备的体系，很多内容可能现在用不到，提前了解为好。</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImages/sponge_baby.jpg" alt=""></p>
<p>注：要注意身体，切勿慢性zs！晚安</p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp6——数据库</title>
    <url>/2019/12/28/Thinkphp6%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Thinkphp6——数据库"><a href="#Thinkphp6——数据库" class="headerlink" title="Thinkphp6——数据库"></a>Thinkphp6——数据库</h1><ul>
<li>ThinkPHP6 数据库和模型操作已经独立为ThinkORM库</li>
<li>要使用Db类必须使用门面方式（ <code>think\facade\Db</code> ）调用</li>
<li>数据库操作统一入口： <code>Db::</code></li>
</ul>
<p>我们可以在Navicat工具——查询中执行SQL命令，例如：</p>
<ul>
<li>创建数据库<br><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImages/navicat.png" alt=""></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;shop_cat&#96;;</span><br><span class="line">CREATE TABLE &#96;shop_cat&#96; (</span><br><span class="line">    &#96;id&#96; int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;ID&#39;,</span><br><span class="line">    &#96;name&#96; varchar(50) NOT NULL COMMENT &#39;分类名&#39;,</span><br><span class="line">    &#96;status&#96; tinyint(1) unsigned NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;状态 1开启 2关闭&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM AUTO_INCREMENT&#x3D;8 DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;分类表&#39;;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (1, &#39;女装&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (2, &#39;男装&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (3, &#39;孕产&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (4, &#39;童装&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (5, &#39;电视&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (6, &#39;手机&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (7, &#39;电脑&#39;, 1);</span><br></pre></td></tr></table></figure>

<h2 id="执行原生sql语句"><a href="#执行原生sql语句" class="headerlink" title="执行原生sql语句"></a>执行原生sql语句</h2><ol>
<li><p><code>query</code> 方法用于执行 MySql 查询操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $query = Db::query(<span class="string">"SELECT * FROM `shop_goods` where status=1"</span>);</span><br><span class="line">    print_r($query);	<span class="comment">// 返回值为二维数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>execute</code> 方法用于执行 MySql 新增和修改操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $execute = Db::execute(<span class="string">"INSERT INTO `shop_goods` VALUES (3, 1, '2019秋冬连衣裙女', 1179.00, 0, 200, 1, 1576080000)"</span>);	<span class="comment">// 使用insert into 插入</span></span><br><span class="line">    print_r($execute);</span><br><span class="line">    $execute = Db::execute(<span class="string">"UPDATE `shop_goods` set `price`='1100' where `id`=3 "</span>);		<span class="comment">// 使用update更新</span></span><br><span class="line">    print_r($execute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="tp自带数据库操作方法"><a href="#tp自带数据库操作方法" class="headerlink" title="tp自带数据库操作方法"></a>tp自带数据库操作方法</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ol>
<li><p>单条数据查询 <code>find</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $find = Db::table(<span class="string">'shop_goods'</span>)-&gt;find(<span class="number">5</span>);</span><br><span class="line">    print_r($find);		<span class="comment">//find 方法查询结果不存在，返回 null，否则返回一维数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：我们一般只需关注查询操作的返回值类型</p>
</li>
<li><p>多条数据查询 <code>select</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $select = Db::table(<span class="string">'shop_goods'</span>)-&gt;select();</span><br><span class="line">    print_r($select);	<span class="comment">// 返回结果是object对象，可以转换为数组；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取单条记录(某行)某个字段的值 <code>value</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $value = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>==<span class="number">1007</span>)value(<span class="string">'title'</span>);</span><br><span class="line">    print_r($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询某一列的值<code>column</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $column = Db::table(<span class="string">'shop_goods'</span>)-&gt;column(<span class="string">'title'</span>);</span><br><span class="line">    print_r($column);</span><br><span class="line">    $column = Db::table(<span class="string">'shop_goods'</span>)-&gt;column(<span class="string">'title'</span>,<span class="string">'id'</span>);</span><br><span class="line">    print_r($column);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ol>
<li><p>添加一条数据 <code>insert</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'日系小浪漫连衣裙'</span>,<span class="string">'price'</span>=&gt;<span class="string">'1598.35'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>];</span><br><span class="line">    $insert = Db::table(<span class="string">'shop_goods'</span>)-&gt;insert($data);	<span class="comment">//返回添加成功的条数，通常情况返回 1</span></span><br><span class="line">    print_r($insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一条数据<code>insertGetId</code></p>
<ul>
<li><code>insertGetId</code> 返回添加数据的自增主键(一般为id值嘛)</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'针织毛衣裙女'</span>,<span class="string">'price'</span>=&gt;<span class="string">'690.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>];</span><br><span class="line">    $insert = Db::table(<span class="string">'shop_goods'</span>)-&gt;insertGetId($data);</span><br><span class="line">    print_r($insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加多条数据 <code>insertAll</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [</span><br><span class="line">        [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'内裤'</span>,<span class="string">'price'</span>=&gt;<span class="string">'658.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>],</span><br><span class="line">        [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'秋裤'</span>,<span class="string">'price'</span>=&gt;<span class="string">'408.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>],</span><br><span class="line">        [<span class="string">'cat'</span>=&gt;<span class="string">'2'</span>,<span class="string">'title'</span>=&gt;<span class="string">' 小丁'</span>,<span class="string">'price'</span>=&gt;<span class="string">'99.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>]</span><br><span class="line">    ];</span><br><span class="line">    $insert = Db::table(<span class="string">'shop_goods'</span>)-&gt;insertAll($data);</span><br><span class="line">    print_r($insert);	<span class="comment">// 返回添加成功的条数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ol>
<li><p>修改数据 <code>update</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [<span class="string">'price'</span>=&gt;<span class="string">'68'</span>];</span><br><span class="line">    $update = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">8</span>)-&gt;update($data);</span><br><span class="line">    print_r($update);	<span class="comment">// 返回影响数据的条数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>inc</code>方法自增一个字段的值</p>
<ul>
<li>就是方便一点而已</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $inc = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">5</span>)-&gt;inc(<span class="string">'stock'</span>)-&gt;update();</span><br><span class="line">    print_r($inc);</span><br><span class="line">    $inc = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">6</span>)-&gt;inc(<span class="string">'stock'</span>,<span class="number">5</span>)-&gt;update();</span><br><span class="line">    print_r($inc);	<span class="comment">// # 字段的值增加5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dec</code> 自减一个字段的值</li>
</ul>
</li>
</ol>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol>
<li><p>删除数据 <code>delete</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment"># 根据条件删除数据</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">1</span>)-&gt;delete();</span><br><span class="line">    print_r($delete);</span><br><span class="line">    <span class="comment"># 删除主键为2的数据</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;delete(<span class="number">2</span>);	<span class="comment">// 参数为主键值</span></span><br><span class="line">    print_r($delete);</span><br><span class="line">    <span class="comment"># 删除整表数据</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;delete(<span class="keyword">true</span>);</span><br><span class="line">    print_r($delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>软删除 <code>useSoftDelete</code></p>
<ul>
<li>业务数据不建议真实删除数据，TP系统提供了软删除机制</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment"># 软删除</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;useSoftDelete(<span class="string">'status'</span>,<span class="number">3</span>)-&gt;delete();</span><br><span class="line">    print_r($delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul>
<li><p><code>save</code> 方法统一写入数据，自动判断是新增还是更新数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">$data = [<span class="string">'cat'</span>=&gt;<span class="string">'2'</span>,<span class="string">'title'</span>=&gt;<span class="string">'美特斯邦威七分牛仔裤女2018夏季新款中腰修身洗水牛仔裤商场款'</span>,<span class="string">'price'</span>=&gt;<span class="string">'49.90'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>];</span><br><span class="line">$save = Db::table(<span class="string">'shop_goods'</span>)-&gt;save($data);</span><br><span class="line">print_r($save);</span><br><span class="line"><span class="comment"># 修改数据</span></span><br><span class="line">$data = [<span class="string">'price'</span>=&gt;<span class="string">'99.00'</span>,<span class="string">'id'</span>=&gt;<span class="number">3</span>];</span><br><span class="line">$save = Db::table(<span class="string">'shop_goods'</span>)-&gt;save($data);</span><br><span class="line">print_r($save);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Thinkphp提供了很多处理数据集的方法"><a href="#Thinkphp提供了很多处理数据集的方法" class="headerlink" title="Thinkphp提供了很多处理数据集的方法"></a><code>Thinkphp</code>提供了很多处理数据集的方法</h2><ul>
<li>前面介绍了原生和tp6中的数据库CURD操作，对查询到的数据集也封装了很多方法处理，这些相当于工具，后面介绍工具使用的常用方法——链式操作</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>toArray</td>
<td>转换为数组</td>
</tr>
<tr>
<td>isEmpty</td>
<td>是否为空</td>
</tr>
<tr>
<td>all</td>
<td>所有数据</td>
</tr>
<tr>
<td>merge</td>
<td>合并其它数据</td>
</tr>
<tr>
<td>diff</td>
<td>比较数组，返回差集</td>
</tr>
<tr>
<td>flip</td>
<td>交换数据中的键和值</td>
</tr>
<tr>
<td>intersect</td>
<td>比较数组，返回交集</td>
</tr>
<tr>
<td>keys</td>
<td>返回数据中的所有键名</td>
</tr>
<tr>
<td>pop</td>
<td>删除数据中的最后一个元素</td>
</tr>
<tr>
<td>shift</td>
<td>删除数据中的第一个元素</td>
</tr>
<tr>
<td>unshift</td>
<td>在数据开头插入一个元素</td>
</tr>
<tr>
<td>push</td>
<td>在结尾插入一个元素</td>
</tr>
<tr>
<td>reduce</td>
<td>通过使用用户自定义函数，以字符串返回数组</td>
</tr>
<tr>
<td>reverse</td>
<td>数据倒序重排</td>
</tr>
<tr>
<td>chunk</td>
<td>数据分隔为多个数据块</td>
</tr>
<tr>
<td>each</td>
<td>给数据的每个元素执行回调</td>
</tr>
<tr>
<td>filter</td>
<td>用回调函数过滤数据中的元素</td>
</tr>
<tr>
<td>column</td>
<td>返回数据中的指定列</td>
</tr>
<tr>
<td>sort</td>
<td>对数据排序</td>
</tr>
<tr>
<td>order</td>
<td>指定字段排序</td>
</tr>
<tr>
<td>shuffle</td>
<td>将数据打乱</td>
</tr>
<tr>
<td>slice</td>
<td>截取数据中的一部分</td>
</tr>
<tr>
<td>map</td>
<td>用回调函数处理数组中的元素</td>
</tr>
<tr>
<td>where</td>
<td>根据字段条件过滤数组中的元素</td>
</tr>
<tr>
<td>whereLike</td>
<td>Like查询过滤元素</td>
</tr>
<tr>
<td>whereNotLike</td>
<td>Not Like过滤元素</td>
</tr>
<tr>
<td>whereIn</td>
<td>IN查询过滤数组中的元素</td>
</tr>
<tr>
<td>whereNotIn</td>
<td>Not IN查询过滤数组中的元素</td>
</tr>
<tr>
<td>whereBetween</td>
<td>Between查询过滤数组中的元素</td>
</tr>
<tr>
<td>whereNotBetween</td>
<td>Not Between查询过滤数组中的元素</td>
</tr>
</tbody></table>
<p>注：看看就行，常用<code>toArray()</code>等</p>
<h1 id="数据库链式操作"><a href="#数据库链式操作" class="headerlink" title="数据库链式操作"></a>数据库链式操作</h1><ul>
<li><p>链式操作即<strong><em>增删改查</em></strong>配合<strong><em>新定义的方法</em></strong>在一条语句中完成对数据的多种操作</p>
</li>
<li><p>数据库提供的链式操作方法，可以有效的提高数据存取的代码清晰度和开发效率</p>
<table>
<thead>
<tr>
<th><strong>连贯操作</strong></th>
<th><strong>作用</strong></th>
<th><strong>支持的参数类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>where*</td>
<td>用于AND查询</td>
<td>字符串、数组和对象</td>
</tr>
<tr>
<td>table</td>
<td>用于定义要操作的数据表名称</td>
<td>字符串和数组</td>
</tr>
<tr>
<td>name</td>
<td>用于定义要操作的数据表名称</td>
<td>字符串</td>
</tr>
<tr>
<td>field*</td>
<td>用于定义要查询的字段（支持字段排除）</td>
<td>字符串和数组</td>
</tr>
<tr>
<td>order*</td>
<td>用于对结果排序</td>
<td>字符串和数组</td>
</tr>
<tr>
<td>limit</td>
<td>用于限制查询结果数量</td>
<td>字符串和数字</td>
</tr>
<tr>
<td>page</td>
<td>用于查询分页（内部会转换成limit）</td>
<td>字符串和数字</td>
</tr>
</tbody></table>
<p>注：带*标识的表示支持多次调用</p>
</li>
<li><p>还有很多其他方法，下面将介绍主要方法</p>
</li>
<li><p>链式操作一般配合<strong><em>表达式</em></strong>使用，表达式写在<code>where</code>里：</p>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th><strong>含义</strong></th>
<th><strong>查询方法</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td></td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
<td></td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td></td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td></td>
</tr>
<tr>
<td>[NOT] LIKE</td>
<td>模糊查询</td>
<td>whereLike/whereNotLike</td>
</tr>
<tr>
<td>[NOT] BETWEEN</td>
<td>（不在）区间查询</td>
<td>whereBetween/whereNotBetween</td>
</tr>
<tr>
<td>[NOT] IN</td>
<td>（不在）IN 查询</td>
<td>whereIn/whereNotIn</td>
</tr>
<tr>
<td>[NOT] NULL</td>
<td>查询字段是否（不）是NULL</td>
<td>whereNull/whereNotNull</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="where查询"><a href="#where查询" class="headerlink" title="where查询"></a><code>where</code>查询</h2><ul>
<li><p><code>where</code>方法在链式操作方法里面是最常用的方法，可以完成包括普通查询、表达式查询、快捷查询、区间查询、组合查询在内的条件查询操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'='</span>,<span class="string">'1'</span>)-&gt;select();</span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>,<span class="string">'&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>,<span class="string">'&lt;'</span>,<span class="string">'8'</span>)</span><br><span class="line">            -&gt;select();</span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'title'</span>,<span class="string">'like'</span>,<span class="string">'%连衣裙%'</span>)-&gt;select();	<span class="comment">// 模糊查询</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'title'</span>,<span class="string">'not like'</span>,<span class="string">'%连衣裙%'</span>)-&gt;select();</span><br><span class="line"></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'not between'</span>,[<span class="number">6</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line"></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'in'</span>,<span class="string">'4,7,10'</span>)-&gt;select();	<span class="comment">// [4,7,10]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="field"><a href="#field" class="headerlink" title="field"></a><code>field</code></h2><ul>
<li><p>主要作用是设定要返回或者操作的字段，可以用于查询和写入操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,discount as d'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;select();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h2><ul>
<li><p>对操作的结果排序或者优先级限制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;order(<span class="string">'price'</span>,<span class="string">'DESC'</span>)</span><br><span class="line">            -&gt;order(<span class="string">'id'</span>,<span class="string">'DESC'</span>)	<span class="comment">// DESC 降序</span></span><br><span class="line">            -&gt;select();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a><code>limit</code></h2><ul>
<li><p>主要用于指定查询和操作的数量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;order(<span class="string">'price'</span>,<span class="string">'DESC'</span>)	<span class="comment">// 可以先使用order</span></span><br><span class="line">            -&gt;limit(<span class="number">0</span>,<span class="number">5</span>)	<span class="comment">// 从0开始，查询5条数据（不包括0）</span></span><br><span class="line">    		-&gt;limit(<span class="number">4</span>)		<span class="comment">// 从第4行开始查询后面所有行（不包括4）</span></span><br><span class="line">            -&gt;select();		<span class="comment">// $offset	$rowNums</span></span><br><span class="line"></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;order(<span class="string">'price'</span>,<span class="string">'DESC'</span>)</span><br><span class="line">            -&gt;page(<span class="number">1</span>,<span class="number">5</span>)		<span class="comment">// page 方法主要用于分页查询</span></span><br><span class="line">            -&gt;select();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><ul>
<li><p>使用聚合方法的查询</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td>max</td>
<td align="center">获取最大值，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>min</td>
<td align="center">获取最小值，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>avg</td>
<td align="center">获取平均值，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>sum</td>
<td align="center">获取总数，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>count</td>
<td align="center">统计数量，参数是要统计的字段名（可选）</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取最小值，参数是要统计的字段名（必须）</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;min(<span class="string">'id'</span>);</span><br><span class="line">print_r($select);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取平均值，参数是要统计的字段名（必须）</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;avg(<span class="string">'id'</span>);</span><br><span class="line">print_r($select);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>注：在涉及到数据库操作的时候，往往需要结合php的一些原生方法，例如<code>isset()</code>等</p>
<h2 id="数据表-table-和-name"><a href="#数据表-table-和-name" class="headerlink" title="数据表 table 和 name"></a>数据表 <code>table</code> 和 <code>name</code></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用table必须完整数据库名</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'10'</span>)-&gt;select();</span><br><span class="line">print_r($select-&gt;toArray());</span><br><span class="line"><span class="comment"># 使用name数据库需要设置前缀，就可以不用写前缀</span></span><br><span class="line">$select = Db::name(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'11'</span>)-&gt;select();</span><br><span class="line">print_r($select-&gt;toArray());</span><br><span class="line"><span class="comment"># 数据库设置前缀，无前缀访问</span></span><br><span class="line">$select = Db::name(<span class="string">'list'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'12'</span>)-&gt;select();</span><br><span class="line">print_r($select-&gt;toArray());</span><br></pre></td></tr></table></figure>

<ul>
<li>前缀设置在database.php文件中</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'connections'</span>     =&gt; [</span><br><span class="line">        <span class="string">'mysql'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 数据库表前缀</span></span><br><span class="line">            <span class="string">'prefix'</span>  =&gt; Env::get(<span class="string">'database.prefix'</span>, <span class="string">'shop_'</span>),</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>



<p>加油</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImages/sponge_baby.jpg" alt=""></p>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp6——项目配置</title>
    <url>/2019/12/27/Thinkphp6%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Thinkphp6——项目配置"><a href="#Thinkphp6——项目配置" class="headerlink" title="Thinkphp6——项目配置"></a>Thinkphp6——项目配置</h1><ul>
<li>Config目录下面是tp6的常规配置，可以自定义配置并引入</li>
<li>配置一般均以return返回</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">├─config（配置目录）</span><br><span class="line">│  ├─app.php            应用配置</span><br><span class="line">│  ├─cache.php          缓存配置</span><br><span class="line">│  ├─console.php        控制台配置</span><br><span class="line">│  ├─cookie.php         Cookie配置</span><br><span class="line">│  ├─database.php       数据库配置</span><br><span class="line">│  ├─filesystem.php     文件磁盘配置</span><br><span class="line">│  ├─lang.php           多语言配置</span><br><span class="line">│  ├─log.php            日志配置</span><br><span class="line">│  ├─middleware.php     中间件配置</span><br><span class="line">│  ├─route.php          URL和路由配置</span><br><span class="line">│  ├─session.php        Session配置</span><br><span class="line">│  ├─trace.php          Trace配置</span><br><span class="line">│  ├─view.php           视图配置</span><br><span class="line">│  └─ ...               更多配置文件</span><br></pre></td></tr></table></figure>

<p>这里只介绍重点的配置文件</p>
<h2 id="模板配置view-php"><a href="#模板配置view-php" class="headerlink" title="模板配置view.php"></a>模板配置view.php</h2><ul>
<li>在这里可以对模板引擎做个性化的定制，但是要保证统一（代码习惯）</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 模板引擎类型使用Think</span></span><br><span class="line">    <span class="string">'type'</span>          =&gt; <span class="string">'Think'</span>,</span><br><span class="line">    <span class="comment">// 默认模板渲染规则 1 解析为小写+下划线 2 全部转换小写 3 保持操作方法</span></span><br><span class="line">    <span class="string">'auto_rule'</span>     =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 模板目录名</span></span><br><span class="line">    <span class="string">'view_dir_name'</span> =&gt; <span class="string">'view'</span>,</span><br><span class="line">    <span class="comment">// 模板后缀</span></span><br><span class="line">    <span class="string">'view_suffix'</span>   =&gt; <span class="string">'html'</span>,</span><br><span class="line">    <span class="comment">// 模板文件名分隔符</span></span><br><span class="line">    <span class="string">'view_depr'</span>     =&gt; DIRECTORY_SEPARATOR,</span><br><span class="line">    <span class="comment">// 模板引擎普通标签开始标记</span></span><br><span class="line">    <span class="string">'tpl_begin'</span>     =&gt; <span class="string">'&#123;'</span>,</span><br><span class="line">    <span class="comment">// 模板引擎普通标签结束标记</span></span><br><span class="line">    <span class="string">'tpl_end'</span>       =&gt; <span class="string">'&#125;'</span>,</span><br><span class="line">    <span class="comment">// 标签库标签开始标记</span></span><br><span class="line">    <span class="string">'taglib_begin'</span>  =&gt; <span class="string">'&#123;'</span>,</span><br><span class="line">    <span class="comment">// 标签库标签结束标记</span></span><br><span class="line">    <span class="string">'taglib_end'</span>    =&gt; <span class="string">'&#125;'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="env-环境变量定义"><a href="#env-环境变量定义" class="headerlink" title="env 环境变量定义"></a><code>env</code> 环境变量定义</h2><ul>
<li>默认安装后的根目录有一个.example.env环境变量示例文件，改成.env文件后生效</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">APP_DEBUG = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">[APP]</span><br><span class="line">DEFAULT_TIMEZONE = Asia/Shanghai</span><br><span class="line"></span><br><span class="line">[DATABASE]		<span class="comment">// 以下是对于数据库的默认值设置</span></span><br><span class="line">TYPE = mysql	<span class="comment">// 如果在database.php中进行设置则会覆盖</span></span><br><span class="line">HOSTNAME = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DATABASE = test</span><br><span class="line">USERNAME = username</span><br><span class="line">PASSWORD = password</span><br><span class="line">HOSTPORT = <span class="number">3306</span></span><br><span class="line">CHARSET = utf8</span><br><span class="line">DEBUG = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">[LANG]</span><br><span class="line">default_lang = zh-cn</span><br></pre></td></tr></table></figure>

<ul>
<li><p>要使用env，必须先引入 <code>think\facade\Env</code> 门面类</p>
</li>
<li><p>环境变量的获取不区分大小写</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImages/database.png" alt=""></p>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp6——基础与视图</title>
    <url>/2019/12/26/%C2%96Thinkphp6%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E4%B8%8E%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="Thinkphp6——基础与视图篇"><a href="#Thinkphp6——基础与视图篇" class="headerlink" title="Thinkphp6——基础与视图篇"></a>Thinkphp6——基础与视图篇</h1><ul>
<li>ThinkPHP支持传统的MVC（Model-View-Controller）模式以及流行的MVVM（Model-View-ViewModel）模式的应用开发</li>
</ul>
<hr>
<h2 id="一、MVC"><a href="#一、MVC" class="headerlink" title="一、MVC"></a>一、MVC</h2><ul>
<li><code>MVC</code> 软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）</li>
<li><code>ThinkPHP</code> 是一个典型的 <code>MVC</code> 架构</li>
</ul>
<blockquote>
<p>控制器 - 负责转发请求，对请求进行处理。<br>视图 - 界面设计人员进行图形界面设计。<br>模型 - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</p>
</blockquote>
<p><img src="http://bew.czgzweb.com/php/mvc.gif" alt="mvc"></p>
<h2 id="二、单应用模式访问"><a href="#二、单应用模式访问" class="headerlink" title="二、单应用模式访问"></a>二、单应用模式访问</h2><ul>
<li>项目访问路径：<a href="http://www.xxx.com/index.php/index/index" target="_blank" rel="noopener">www.tp6.com/index.php/index/index</a></li>
</ul>
<blockquote>
<p>index.php 入口文件，在tp6/public目录下<br>index 控制器<br>index 操作</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">├─app           应用目录</span><br><span class="line">│  ├─controller      控制器目录</span><br><span class="line">│  ├─model           模型目录</span><br><span class="line">│  ├─ ...            更多类库目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─common.php         公共函数文件</span><br><span class="line">│  └─event.php          事件定义文件</span><br><span class="line">│</span><br><span class="line">├─config                配置目录</span><br><span class="line">│  ├─app.php            应用配置</span><br><span class="line">│  ├─cache.php          缓存配置</span><br><span class="line">│  ├─console.php        控制台配置</span><br><span class="line">│  ├─cookie.php         Cookie配置</span><br><span class="line">│  ├─database.php       数据库配置</span><br><span class="line">│  ├─filesystem.php     文件磁盘配置</span><br><span class="line">│  ├─lang.php           多语言配置</span><br><span class="line">│  ├─log.php            日志配置</span><br><span class="line">│  ├─middleware.php     中间件配置</span><br><span class="line">│  ├─route.php          URL和路由配置</span><br><span class="line">│  ├─session.php        Session配置</span><br><span class="line">│  ├─trace.php          Trace配置</span><br><span class="line">│  └─view.php           视图配置</span><br><span class="line">│</span><br><span class="line">├─view            视图目录</span><br><span class="line">├─route                 路由定义目录</span><br><span class="line">│  ├─route.php          路由定义文件</span><br><span class="line">│  └─ ...</span><br><span class="line">│</span><br><span class="line">├─<span class="keyword">public</span>                WEB目录（对外访问目录）</span><br><span class="line">│  ├─index.php          入口文件</span><br><span class="line">│  ├─router.php         快速测试文件</span><br><span class="line">│  └─.htaccess          用于apache的重写</span><br><span class="line">│</span><br><span class="line">├─extend                扩展类库目录</span><br><span class="line">├─runtime               应用的运行时目录（可写，可定制）</span><br><span class="line">├─vendor                Composer类库目录</span><br><span class="line">├─.example.env          环境变量示例文件</span><br><span class="line">├─composer.json         composer 定义文件</span><br><span class="line">├─LICENSE.txt           授权说明文件</span><br><span class="line">├─README.md             README 文件</span><br><span class="line">├─think                 命令行入口文件</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、安装视图"><a href="#三、安装视图" class="headerlink" title="三、安装视图"></a>三、安装视图</h2><ul>
<li>视图功能由\think\View类配合视图驱动（也即模板引擎驱动）类一起完成，新版仅内置了PHP原生模板引擎（主要用于内置的异常页面输出），如果需要使用其它的模板引擎需要单独安装相应的模板引擎扩展</li>
<li>因此，你需要在命令行运行下面这行指令：</li>
</ul>
<blockquote>
<p>composer require topthink/think-view</p>
</blockquote>
<ul>
<li>视图目录可以在根目录，也可以在app应用目录</li>
</ul>
<hr>
<h2 id="四、模版渲染"><a href="#四、模版渲染" class="headerlink" title="四、模版渲染"></a>四、模版渲染</h2><ul>
<li>要使用View，必须先引入 <code>think\facade\View</code> 门面类</li>
<li><code>fetch</code> 方法渲染页面</li>
</ul>
<blockquote>
<p>controller代码</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controller</span>;	<span class="comment">// 命名空间</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">View</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> View::fetch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5Cszspl%5CDesktop%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p>
<ul>
<li>注：一个控制器的类对应一个view视图的目录，这个类中的<strong><em>方法</em></strong>，对应这个目录中的html<strong><em>页面</em></strong></li>
</ul>
<hr>
<h2 id="五、模版变量"><a href="#五、模版变量" class="headerlink" title="五、模版变量"></a>五、模版变量</h2><ul>
<li>在控制器中使用<code>assign</code> 方法给全局变量赋值，这个变量也叫作模板变量<br>注：要区分模板和模型的概念</li>
<li>在视图页面中使用 <code>{$name}</code>输出模板变量值</li>
</ul>
<blockquote>
<p>controller代码</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">View</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 模板变量赋值</span></span><br><span class="line">        View::assign(<span class="string">'name'</span>,<span class="string">'欧阳克'</span>);</span><br><span class="line">        View::assign(<span class="string">'email'</span>,<span class="string">'oyk@php.cn'</span>);</span><br><span class="line">        <span class="comment">// 或者批量赋值</span></span><br><span class="line">        View::assign([</span><br><span class="line">            <span class="string">'name'</span>  =&gt; <span class="string">'Roy'</span>,</span><br><span class="line">            <span class="string">'email'</span> =&gt; <span class="string">'szsplyr@163.com'</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="comment">// 模板输出</span></span><br><span class="line">        <span class="keyword">return</span> View::fetch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>view代码</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ThinkPHP6<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    姓名：&#123;$name&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：&#123;$email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、模板引擎"><a href="#六、模板引擎" class="headerlink" title="六、模板引擎"></a>六、模板引擎</h2><ul>
<li><p>我们在页面中使用<code>{$var}</code>输出变量，还可以借助<strong><em>标签</em></strong>，实现更多的功能。</p>
</li>
<li><p>模板引擎支持普通标签和XML标签方式两种标签定义，分别用于不同的目的。</p>
<table>
<thead>
<tr>
<th><strong>标签类型</strong></th>
<th align="left"><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>普通标签</td>
<td align="left">主要用于输出变量、函数过滤和做一些基本的运算操作</td>
</tr>
<tr>
<td>XML标签</td>
<td align="left">也称为标签库标签，主要完成一些逻辑判断、控制和循环输出，并且可扩展</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="普通标签"><a href="#普通标签" class="headerlink" title="普通标签"></a>普通标签</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>{$a+$b}</td>
</tr>
<tr>
<td>-</td>
<td>{$a-$b}</td>
</tr>
<tr>
<td>*</td>
<td>{$a*$b}</td>
</tr>
<tr>
<td>/</td>
<td>{$a/$b}</td>
</tr>
<tr>
<td>%</td>
<td>{$a%$b}</td>
</tr>
<tr>
<td>++</td>
<td>{$a++} 或 {++$a}</td>
</tr>
<tr>
<td>–</td>
<td>{$a–} 或{–$a}</td>
</tr>
<tr>
<td>综合运算</td>
<td>{$a+$b*10+$c}</td>
</tr>
<tr>
<td>三元运算符</td>
<td>{$a==$b ? ‘yes’ : ‘no’}</td>
</tr>
</tbody></table>
<blockquote>
<p>view文件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$a+$b&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$a-$b&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$a*$b&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$a/$b&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$a%$b&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$a++&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;++$a&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$a--&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;--$a&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$c ? '存在' : '不存在'&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="模版函数"><a href="#模版函数" class="headerlink" title="模版函数"></a>模版函数</h3><table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>date</td>
<td>日期格式化（支持各种时间类型）</td>
</tr>
<tr>
<td>format</td>
<td>字符串格式化</td>
</tr>
<tr>
<td>upper</td>
<td>转换为大写</td>
</tr>
<tr>
<td>lower</td>
<td>转换为小写</td>
</tr>
<tr>
<td>first</td>
<td>输出数组的第一个元素</td>
</tr>
<tr>
<td>last</td>
<td>输出数组的最后一个元素</td>
</tr>
<tr>
<td>default</td>
<td>默认值</td>
</tr>
<tr>
<td>raw</td>
<td>不使用（默认）转义</td>
</tr>
<tr>
<td>md5</td>
<td>md5加密</td>
</tr>
<tr>
<td>substr</td>
<td>截取字符串</td>
</tr>
</tbody></table>
<blockquote>
<p>view文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;$time|date&#x3D;&#39;Y-m-d H:i:s&#39;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$num|format&#x3D;&#39;%02d&#39;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$str|upper&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$str|lower&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$arr|first&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$arr|last&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$default|default&#x3D;&quot;欧阳克&quot;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$str|substr&#x3D;0,3&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$str|md5&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;&#123;$str|lower|substr&#x3D;0,3&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注：<code>$var|</code>后面接函数</p>
<hr>
</li>
</ul>
<h2 id="XML标签"><a href="#XML标签" class="headerlink" title="XML标签"></a>XML标签</h2><h3 id="foreach循环标签"><a href="#foreach循环标签" class="headerlink" title="foreach循环标签"></a><code>foreach</code>循环标签</h3><ul>
<li><p><code>foreach</code> 标签的用法和PHP语法非常接近，用于循环输出数组或者对象的属性。</p>
<blockquote>
<p>view文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;foreach $arr as $v&#125;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;ID：&#123;$v[&#39;id&#39;]&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;姓名：&#123;$v[&#39;name&#39;]&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&#123;&#x2F;foreach&#125;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3></li>
</ul>
<h3 id="volist循环标签"><a href="#volist循环标签" class="headerlink" title="volist循环标签"></a><code>volist</code>循环标签</h3><ul>
<li>二维数组的结果输出</li>
<li><code>name</code> 模板赋值的变量名称</li>
<li><code>id</code> 当前的循环变量，可以随意起名</li>
<li><code>key</code> 下标，从1开始，默认变量i</li>
<li><code>offset</code> 开始行数</li>
<li><code>length</code> 获取行数</li>
<li><code>empty</code> 如果数据为空，显示此文字</li>
</ul>
<blockquote>
<p>view文件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;volist name="arr" id="v" key="k"  offset="1" length="2"&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>ID：&#123;$v['id']&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名：&#123;$v['name']&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>下标：&#123;$k&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;/volist&#125;</span><br></pre></td></tr></table></figure>

<h3 id="if-判断标签"><a href="#if-判断标签" class="headerlink" title="if 判断标签"></a><code>if</code> 判断标签</h3><blockquote>
<p>view文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;if $status &#x3D;&#x3D; 1&#125;</span><br><span class="line">    &lt;div&gt;开启&lt;&#x2F;div&gt;</span><br><span class="line">&#123;&#x2F;if&#125;</span><br><span class="line"></span><br><span class="line">&#123;if $status &#x3D;&#x3D; 0&#125;</span><br><span class="line">    &lt;div&gt;关闭&lt;&#x2F;div&gt;</span><br><span class="line">&#123;else&#x2F;&#125;</span><br><span class="line">    &lt;div&gt;开启&lt;&#x2F;div&gt;</span><br><span class="line">&#123;&#x2F;if&#125;</span><br><span class="line"></span><br><span class="line">&#123;if $order_status &#x3D;&#x3D; 0&#125;</span><br><span class="line">    &lt;div&gt;未支付&lt;&#x2F;div&gt;</span><br><span class="line">&#123;elseif $order_status &#x3D;&#x3D; 1&#x2F;&#125;</span><br><span class="line">    &lt;div&gt;已支付 待发货&lt;&#x2F;div&gt;</span><br><span class="line">&#123;elseif $order_status &#x3D;&#x3D; 2&#x2F;&#125;</span><br><span class="line">    &lt;div&gt;已发货 待收货&lt;&#x2F;div&gt;</span><br><span class="line">&#123;elseif $order_status &#x3D;&#x3D; 3&#x2F;&#125;</span><br><span class="line">    &lt;div&gt;已收货 待评论&lt;&#x2F;div&gt;</span><br><span class="line">&#123;elseif $order_status &#x3D;&#x3D; 4&#x2F;&#125;</span><br><span class="line">    &lt;div&gt;已完成&lt;&#x2F;div&gt;</span><br><span class="line">&#123;&#x2F;if&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch-判断标签"><a href="#switch-判断标签" class="headerlink" title="switch 判断标签"></a><code>switch</code> 判断标签</h3><blockquote>
<p>view文件</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;switch $order_status&#125;</span><br><span class="line">    &#123;case 0 &#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span>未支付<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#123;/case&#125;</span><br><span class="line">    &#123;case 1 &#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span>已支付 待发货<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#123;/case&#125;</span><br><span class="line">    &#123;case 2 &#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span>已发货 待收货<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#123;/case&#125;</span><br><span class="line">    &#123;case 3 &#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span>已收货 待评论<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#123;/case&#125;</span><br><span class="line">    &#123;case 4 &#125;<span class="tag">&lt;<span class="name">div</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#123;/case&#125;</span><br><span class="line">&#123;/switch&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包含文件"><a href="#包含文件" class="headerlink" title="包含文件"></a>包含文件</h3><ul>
<li><code>include</code> 标签，引入模版文件</li>
<li><code>load</code> 标签，引入资源文件(css、js)</li>
</ul>
<blockquote>
<p>view文件，把头部和尾部分文件</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">include</span> file=<span class="string">"public/header"</span> /&#125;</span><br><span class="line">&#123;<span class="keyword">include</span> file=<span class="string">"public/left"</span> /&#125;</span><br><span class="line"></span><br><span class="line">&#123;load href=<span class="string">"/static/layui/css/layui.css"</span> /&#125;</span><br><span class="line">&#123;load href=<span class="string">"/static/layui/layui.js"</span> /&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">include</span> file=<span class="string">"public/tail"</span> /&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><ul>
<li>条件标签</li>
</ul>
<table>
<thead>
<tr>
<th><strong>标签</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>in</td>
<td>判断变量是否存在某些值</td>
</tr>
<tr>
<td>notin</td>
<td>判断变量是否不存在某些值</td>
</tr>
<tr>
<td>between</td>
<td>判断变量是否存在某些值</td>
</tr>
<tr>
<td>notbetween</td>
<td>判断变量是否不存在某些范围值</td>
</tr>
<tr>
<td>present</td>
<td>判断某个变量是否 已定义</td>
</tr>
<tr>
<td>notpresent</td>
<td>判断某个变量是否 未定义</td>
</tr>
<tr>
<td>empty</td>
<td>判断某个变量是否为空</td>
</tr>
<tr>
<td>notempty</td>
<td>判断某个变量是否不为空</td>
</tr>
<tr>
<td>defined</td>
<td>判断某个常量是否 已定义</td>
</tr>
<tr>
<td>notdefined</td>
<td>判断某个常量是否 未定义</td>
</tr>
</tbody></table>
<ul>
<li>比较标签</li>
</ul>
<table>
<thead>
<tr>
<th><strong>标签</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>eq</td>
<td>等于</td>
</tr>
<tr>
<td>neq</td>
<td>不等于</td>
</tr>
<tr>
<td>gt</td>
<td>大于</td>
</tr>
<tr>
<td>egt</td>
<td>大于等于</td>
</tr>
<tr>
<td>lt</td>
<td>小于</td>
</tr>
<tr>
<td>elt</td>
<td>小于等于</td>
</tr>
<tr>
<td>heq</td>
<td>恒等于</td>
</tr>
<tr>
<td>nheq</td>
<td>不恒等于</td>
</tr>
</tbody></table>
<ul>
<li>循环标签</li>
</ul>
<table>
<thead>
<tr>
<th><strong>标签</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>for</td>
<td>计数循环</td>
</tr>
</tbody></table>
<ul>
<li>杂项标签</li>
</ul>
<table>
<thead>
<tr>
<th><strong>标签</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>literal</td>
<td>原样输出</td>
</tr>
<tr>
<td>php</td>
<td>使用原生php代码</td>
</tr>
</tbody></table>
<hr>
<blockquote>
<p>注：别担心，孰能生巧！</p>
</blockquote>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp6——环境配置篇</title>
    <url>/2019/12/25/Thinkphp6%E2%80%94%E2%80%94%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%AF%87/</url>
    <content><![CDATA[<h1 id="thinkphp6基础笔记-连载"><a href="#thinkphp6基础笔记-连载" class="headerlink" title="thinkphp6基础笔记[连载]"></a>thinkphp6基础笔记[连载]</h1><h2 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h2><p>主流的PHP框架有Laravel，Thinkphp，Yii，作为一款国产轻量级的中型框架，有易于上手，有丰富的中文文档，框架的兼容性较强等优点，目前已更新至tp6。</p>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><ul>
<li><p><code>6.0</code> 版本开始，必须通过 <code>Composer</code> 方式安装和更新，无法通过 <code>Git</code> 下载安装。</p>
</li>
<li><p>PHP &gt;= 7.1.0</p>
<p>在windows中，<a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="noopener">下载Composer软件</a></p>
<blockquote>
<p>第一步：双击下载好的composer运行程序<br>第二步：选择要安装的盘符<br>第三步：选择php版本。如果你是集成包环境，就到集成包里找php<br>第四步：全部下一步</p>
</blockquote>
<p>设置 Composer 下载源</p>
<ul>
<li>先设置 <code>Composer</code> 的下载源，也是镜像地址</li>
<li>在命令行窗口或控制台 输入</li>
</ul>
<blockquote>
<p>composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a></p>
</blockquote>
<ul>
<li>国外的网站速度慢，官网建议使用国内镜像（阿里云）</li>
</ul>
<blockquote>
<p>composer config -g repo.packagist composer <a href="https://mirrors.aliyun.com/composer" target="_blank" rel="noopener">https://mirrors.aliyun.com/composer</a></p>
</blockquote>
<p>安装ThinkPHP6</p>
<ul>
<li>先切换到你自己的php环境根目录</li>
</ul>
<blockquote>
<p>cd d:/phpstudy/www</p>
</blockquote>
<ul>
<li>在执行下载<code>Thinkphp6</code>命令。最后的tp6，是新建的tp6目录，可自行更改</li>
</ul>
<blockquote>
<p>composer create-project topthink/think tp</p>
</blockquote>
<ul>
<li>更新<code>Thinkphp6</code>核心</li>
</ul>
<blockquote>
<p>composer update topthink/framework</p>
</blockquote>
<ul>
<li>注：安装和更新命令所在的目录是不同的，更新必须在你的应用根目录下面执行</li>
</ul>
<p>目录结构</p>
<ul>
<li><p>6.0版本目录结构的主要变化是核心框架纳入<code>vendor</code>目录，然后原来的<code>application</code>目录变成<code>app</code>目录。</p>
</li>
<li><p>安装后的目录结构就是一个单应用模式</p>
</li>
<li><p>在 <code>mac</code> 或者 <code>linux</code> 环境下面，注意需要设置 <code>runtime</code> 目录权限为777</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www  WEB部署目录（或者子目录）</span><br><span class="line">├─app           应用目录</span><br><span class="line">│  ├─controller      控制器目录</span><br><span class="line">│  ├─model           模型目录</span><br><span class="line">│  ├─ ...            更多类库目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─common.php         公共函数文件</span><br><span class="line">│  └─event.php          事件定义文件</span><br><span class="line">│</span><br><span class="line">├─config                配置目录</span><br><span class="line">│  ├─app.php            应用配置</span><br><span class="line">│  ├─cache.php          缓存配置</span><br><span class="line">│  ├─console.php        控制台配置</span><br><span class="line">│  ├─cookie.php         Cookie配置</span><br><span class="line">│  ├─database.php       数据库配置</span><br><span class="line">│  ├─filesystem.php     文件磁盘配置</span><br><span class="line">│  ├─lang.php           多语言配置</span><br><span class="line">│  ├─log.php            日志配置</span><br><span class="line">│  ├─middleware.php     中间件配置</span><br><span class="line">│  ├─route.php          URL和路由配置</span><br><span class="line">│  ├─session.php        Session配置</span><br><span class="line">│  ├─trace.php          Trace配置</span><br><span class="line">│  └─view.php           视图配置</span><br><span class="line">│</span><br><span class="line">├─view            视图目录</span><br><span class="line">├─route                 路由定义目录</span><br><span class="line">│  ├─route.php          路由定义文件</span><br><span class="line">│  └─ ...</span><br><span class="line">│</span><br><span class="line">├─public                WEB目录（对外访问目录）</span><br><span class="line">│  ├─index.php          入口文件</span><br><span class="line">│  ├─router.php         快速测试文件</span><br><span class="line">│  └─.htaccess          用于apache的重写</span><br><span class="line">│</span><br><span class="line">├─extend                扩展类库目录</span><br><span class="line">├─runtime               应用的运行时目录（可写，可定制）</span><br><span class="line">├─vendor                Composer类库目录</span><br><span class="line">├─.example.env          环境变量示例文件</span><br><span class="line">├─composer.json         composer 定义文件</span><br><span class="line">├─LICENSE.txt           授权说明文件</span><br><span class="line">├─README.md             README 文件</span><br><span class="line">├─think                 命令行入口文件</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>运行<code>Thinkphp6</code></p>
<ul>
<li>我使用的是集成环境phpStudy，编辑器sublime，数据库管理工具Navicat</li>
<li>在Windows中，在C:\Windows\System32\drivers\etc 目录下，打开 hosts文件，设置虚拟域名</li>
<li>在集成环境——站点管理中将入口执行tp6/public目录下即可</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue高级</title>
    <url>/2019/10/08/Vue%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="Vue高级"><a href="#Vue高级" class="headerlink" title="Vue高级"></a>Vue高级</h1><ul>
<li>在掌握了Vue的基本操作之后，为了避免采坑，需要了解一些深层的原理</li>
</ul>
<h2 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h2><p>生命周期基本流程图：</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/Vue/lifecycle.png" alt=""></p>
<ul>
<li><p>从图中即可看出操作的顺序，下面逐个解释</p>
<ol>
<li><p>beforeCreate</p>
<p>实例刚在内存中被创建出来，此时，还没有初始化好 data 和 methods 属性</p>
</li>
<li><p>created</p>
<p>实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始编译模板</p>
</li>
<li><p>beforeMount<br>此时已经完成了模板的编译，但是还没有挂载到页面中</p>
</li>
<li><p>mounted<br>此时已经将编译好的模板挂载到了页面指定的容器中显示</p>
</li>
<li><p>beforeUpdate<br>状态更新之前执行此函数， 此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染DOM节点</p>
</li>
<li><p>updated<br>实例更新完毕之后调用此函数，此时 data 中的状态值和界面上显示的数据，都完成了更新</p>
</li>
<li><p>beforeDestroy<br>实例销毁之前调用。在这一步，实例仍然完全可用</p>
</li>
<li><p>destroyed<br>Vue 实例销毁后调用，所有的事件监听器会被移除，所有的子实例也会被销毁</p>
</li>
</ol>
</li>
<li><p>了解了生命周期的流程，会加深对代码架构的理解</p>
</li>
<li><p>对于Vue中内置的方法属性的执行顺序可以查看源码：</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/Vue/VueMethods.png" alt=""></p>
<ul>
<li>可以看出：props =&gt; methods =&gt;data =&gt; computed =&gt; watch</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前端框架的选择和使用最好结合项目学习，熟能生巧。逐步深入，了解其各自的优势。</p>
<p>后面会整理一些Vue.js的内部运行机制，跟上大佬们的脚步学习。</p>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue进阶</title>
    <url>/2019/10/07/Vue%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="Vue进阶"><a href="#Vue进阶" class="headerlink" title="Vue进阶"></a>Vue进阶</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li><p>组件可以扩展 HTML 元素，封装可重用的代码，类似于模板<code>template</code></p>
</li>
<li><p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/Vue/component.png" alt=""></p>
</li>
<li><p>语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 注册一个全局组件</span><br><span class="line">// tagName 为组件名，options 为配置选项</span><br><span class="line">Vue.component(tagName, options)</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line"><span class="tag">&lt;<span class="name">tagName</span>&gt;</span><span class="tag">&lt;/<span class="name">tagName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 也可以先使用Vue.extend 来创建全局的Vue组件模板对象，通过 template 属性，指定了组件要展示的HTML内容，使用变量接收即可</span><br><span class="line">var com1 = Vue.extend(&#123;</span><br><span class="line">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是使用 Vue.extend 创建的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component('myCom1', com1)</span><br><span class="line">// 定义全局组件的时候，如果组件名称使用了驼峰命名，则在引用组件的时候，需要把大写的驼峰改为小写的字母，同时，两个单词之前，使用 - 链接</span><br><span class="line"></span><br><span class="line">// 组合简写</span><br><span class="line">// 组件的 template 属性指向的模板内容,必须有且仅有一个根元素</span><br><span class="line">Vue.component('mycom1', Vue.extend(&#123;</span><br><span class="line">      template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是使用 Vue.extend 创建的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">// 一般情况下，我们按如下方式全局注册组件</span><br></pre></td></tr></table></figure>

<ul>
<li>全局组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 全局注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'runoob'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>局部组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runoob</span>&gt;</span><span class="tag">&lt;/<span class="name">runoob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 模板对象</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> Child = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义组件!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'</span></span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">   	<span class="comment">// 局部注册</span></span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// &lt;runoob&gt; 将只在父模板可用</span></span></span><br><span class="line"><span class="actionscript">    <span class="string">'runoob'</span>: Child</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycom3</span>&gt;</span><span class="tag">&lt;/<span class="name">mycom3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">login</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是通过 template 元素,在外部定义的组件结构,这个方式,有代码的只能提示和高亮<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>好用,不错!<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是私有的 login 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">'mycom3'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">      template: <span class="string">'#tmpl'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app2'</span>,</span></span><br><span class="line"><span class="actionscript">      components: &#123; <span class="comment">// 定义实例内部私有组件的</span></span></span><br><span class="line">        login: &#123;</span><br><span class="line"><span class="actionscript">          template: <span class="string">'#tmpl2'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>:is</code> 属性,可以用来指定要展示的组件的名称</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='login'"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"comName='register'"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Vue提供了 component ,来展示对应名称的组件 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- component 是一个占位符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 组件名称是 字符串</span></span></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'login'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  Vue.component(<span class="string">'register'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h3</span>&gt;</span>注册组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>'</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      comName: <span class="string">'login'</span> <span class="comment">// 当前 component 中的 :is 绑定的组件的名称</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>prop</p>
<p>父模板的数据需要通过 props 传给子组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--message变量可以自定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 子组件需要显式地用 props 选项声明</span></span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以用 v-bind 动态绑定 props 的值</li>
<li>注：prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来</li>
<li>也就是说<code>v-bind</code>可以作为一种方法来传导数据，但是具有动态效果</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 当父组件(模板)的数据变化时，该变化也会传导给子组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册</span></span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 声明 props</span></span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'message'</span>],</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 同样也可以在 vm 实例中像 "this.message" 这样使用</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    parentMsg: <span class="string">'父组件内容'</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如下，我们利用组件设计一个带有验证功能的模板；可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component('my-component', &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br><span class="line">    propA: Number,</span><br><span class="line">    // 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // 必填的字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的数字</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    // 带有默认值的对象</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      // 对象或数组默认值必须从一个工厂函数获取</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: 'hello' &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        // 这个值必须匹配下列字符串中的一个</span><br><span class="line">        return ['success', 'warning', 'danger'].indexOf(value) !== -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// type 也可以是一个自定义构造器，使用 instanceof 检测</span><br></pre></td></tr></table></figure>

<ul>
<li>父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！</li>
<li>使用 v-on 绑定自定义事件, 每个 Vue 实例都实现了事件接口(Events interface)，即：<ul>
<li>使用 <code>$on(eventName)</code> 监听事件</li>
<li>使用 <code>$emit(eventName)</code> 触发事件</li>
</ul>
</li>
<li>通过触发或者监听事件，达到子组件传递数据的效果</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"incrementHandler"</span>&gt;</span></span><span class="template-variable">&#123;&#123; counter &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span></span><br><span class="line"><span class="actionscript">  data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    incrementHandler: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.counter += <span class="number">1</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 通过 $emit(increment) 出发父组件中绑定的 incrementTotal 方法</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#counter-event-example'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    total: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    incrementTotal: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.total += <span class="number">1</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：上面的 <code>data</code> 必须是一个函数，而不是一个对象</p>
</li>
</ul>
<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><ul>
<li><p>类似于注册组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 注册一个全局指令</span><br><span class="line">Vue.directive(comName, options)</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局指令 v-focus, 该指令的功能是在页面加载时，input 元素自动获取焦点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span></span><br><span class="line"><span class="actionscript">Vue.directive(<span class="string">'focus'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 当绑定元素插入到 DOM 中</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// el指绑定的命令，可以直接操作DOM</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// js教程：https://www.w3school.com.cn/js/index.asp</span></span></span><br><span class="line"><span class="actionscript">  inserted: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 聚焦元素</span></span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同样，可以注册 局部指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面载入时，input 元素自动获取焦点：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 创建根实例</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  directives: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 注册一个局部的自定义指令 v-focus</span></span></span><br><span class="line">    focus: &#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 指令的定义</span></span></span><br><span class="line"><span class="actionscript">      inserted: <span class="function"><span class="keyword">function</span> <span class="params">(el)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 聚焦元素</span></span></span><br><span class="line">        el.focus()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>上例中使用的<code>inserted</code>属于指令定义的钩子函数，如下</p>
<ul>
<li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li>
<li><code>inserted</code>: 被绑定元素（指令）插入父节点（模板标签）时调用（父节点存在即可调用，不必存在于 document 中）。</li>
<li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li>
<li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li>
<li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li>
</ul>
</li>
<li><p>钩子函数的参数有：</p>
<ul>
<li><strong>el</strong>: 指令所绑定的元素，可以用来直接操作 DOM 。</li>
<li>binding：一个对象，包含以下属性：<ul>
<li><strong>name</strong>: 指令名，不包括 <code>v-</code> 前缀。</li>
<li><strong>value</strong>: 指令的绑定值， 例如： <code>v-my-directive=&quot;1 + 1&quot;</code>, value 的值是 <code>2</code>。</li>
<li><strong>oldValue</strong>: 指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。无论值是否改变都可用。</li>
<li><strong>expression</strong>: 绑定值的表达式或变量名。 例如 <code>v-my-directive=&quot;1 + 1&quot;</code> ， expression 的值是 <code>&quot;1 + 1&quot;</code>。</li>
<li><strong>arg</strong>: 传给指令的参数。例如 <code>v-my-directive:foo</code>， arg 的值是 <code>&quot;foo&quot;</code>。</li>
<li><strong>modifiers</strong>: 一个包含修饰符的对象。 例如： <code>v-my-directive.foo.bar</code>, 修饰符对象 modifiers 的值是 <code>{ foo: true, bar: true }</code>。</li>
</ul>
</li>
<li><strong>vnode</strong>: Vue 编译生成的虚拟节点。</li>
<li><strong>oldVnode</strong>: 上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用。</li>
</ul>
</li>
<li><p>有时候我们不需要其他钩子函数，我们可以简写函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.directive('runoob', function (el, binding) &#123;</span><br><span class="line">  // 设置指令的背景颜色</span><br><span class="line">  el.style.backgroundColor = binding.value.color</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ul>
<li><p>路由允许我们通过不同的 URL 访问不同的内容</p>
</li>
<li><p>路由需要载入 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router 库</a>，中文文档地址：<a href="http://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">vue-router文档</a></p>
</li>
<li><p>首先介绍一下获取DOM元素和组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取元素"</span> @<span class="attr">click</span>=<span class="string">"getElement"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用ref即可将DOM节点添加到$refs变量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"myh3"</span> <span class="attr">ref</span>=<span class="string">"h3"</span>&gt;</span>今天天气太好了！！！<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">login</span> <span class="attr">ref</span>=<span class="string">"mylogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">login</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> login = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">'son msg'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      show() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'调用了子组件的方法'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 不建议使用JS直接操作DOM元素</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'myh3'</span>).innerText)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 在浏览器中查看Vue实例，有一个$refs变量</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.h3.innerText)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mylogin.msg)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$refs.mylogin.show()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="actionscript">      login <span class="comment">// login:login</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><pre><code>1. 后端路由：对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源
2. 前端路由：对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现
3. 在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由），也就是说，旨在前端的静态页面之间跳转</code></pre><ul>
<li><code>vue-router.js</code>文件应该放在<code>vue.js</code>之后</li>
<li>创建一个路由对象类似于创建Vue实例，最后需要在Vue实例中使用<code>router</code>注册</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.myactive&#123;  /* 组件模板自定义样式 */</span><br><span class="line">      color: red;</span><br><span class="line">      font-weight: 800;</span><br><span class="line">      font-style: italic;</span><br><span class="line">      font-size: 80px;</span><br><span class="line">      text-decoration: underline;</span><br><span class="line">      background-color: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.v-enter,</span><br><span class="line">.v-leave-to &#123;	/* <span class="tag">&lt;<span class="name">router-view</span>&gt;</span>样式，淡入淡出 */</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(140px);</span><br><span class="line">&#125;</span><br><span class="line">.v-enter-active,</span><br><span class="line">.v-leave-active &#123;</span><br><span class="line">    transition: all 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 路由规则匹配到的组件，就会展示到 router-view 中去 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">mode</span>=<span class="string">"out-in"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 推荐使用a标签改变路由地址，可以传参；Vue提供了router-link标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/login?id=1&amp;name=roy"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- router-link 默认渲染为一个a 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span> <span class="attr">tag</span>=<span class="string">"span"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 组件的模板对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> login = &#123; template: <span class="string">'&lt;h1&gt;登录组件&lt;/h1&gt;'</span> &#125;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> register = &#123; template: <span class="string">'&lt;h1&gt;注册组件&lt;/h1&gt;'</span> &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建一个路由对象，当导入 vue-router 包之后，在 window 全局对象中就有了一个路由的构造函数 VueRouter</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 在 new 路由对象的时候，可以为构造函数传递一个配置对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> routerObj = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// routes // 这个配置对象中的 routes 表示 【路由匹配规则】 的意思</span></span></span><br><span class="line"><span class="actionscript">    routes: [ <span class="comment">// 路由匹配规则 </span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 每个路由规则，都是一个对象，这个规则对象有两个必须的属性：</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 属性1 是 path， 表示监听哪个路由链接地址；</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 属性2 是 component，表示如果路由是前面匹配到的 path 则展示 component 属性对应的那个组件</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 注意： component 的属性值必须是一个组件的模板对象， 不能是组件的引用名称；</span></span></span><br><span class="line"><span class="actionscript">      &#123; path: <span class="string">'/'</span>, redirect: <span class="string">'/login'</span> &#125;,<span class="comment">// 前端页面跳转，默认显示登录组件</span></span></span><br><span class="line"><span class="actionscript">      &#123; path: <span class="string">'/login'</span>, component: login &#125;,</span></span><br><span class="line"><span class="actionscript">      &#123; path: <span class="string">'/register'</span>, component: register &#125;</span></span><br><span class="line">    ],</span><br><span class="line"><span class="actionscript">    linkActiveClass: <span class="string">'myactive'</span>    <span class="comment">//自定义类样式名称</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="actionscript">    router: routerObj <span class="comment">// 将路由规则对象，注册到 vm 实例上用来监听 URL 地址的变化，然后展示对应的组件</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>路由参数的获取<ul>
<li>在Vue实例中的<code>$route</code>变量内</li>
<li>可以通过路由匹配规则的<code>path</code>属性，通过<code>$params</code>变量获取</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> login = &#123;</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;登录--- &#123;&#123; this.$route.query.id &#125;&#125; </span></span><br><span class="line"><span class="string">        			   --- &#123;&#123; this.$route.query.name &#125;&#125; &lt;/h1&gt;'</span>, </span><br><span class="line">    data()&#123; <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">'123'</span> &#125; &#125;,</span><br><span class="line">    created()&#123; <span class="comment">// 组件的生命周期钩子函数</span></span><br><span class="line">    	<span class="comment">// console.log(this.$route)</span></span><br><span class="line">    	<span class="comment">// console.log(this.$route.query.id)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> login = &#123;</span><br><span class="line">    template: <span class="string">'&lt;h1&gt;登录 --- &#123;&#123; $route.params.id &#125;&#125; </span></span><br><span class="line"><span class="string">    					--- &#123;&#123; $route.params.name &#125;&#125;&lt;/h1&gt;'</span>, </span><br><span class="line">    data()&#123;</span><br><span class="line">    	<span class="keyword">return</span> &#123;</span><br><span class="line">    		msg: <span class="string">'123'</span></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123; <span class="comment">// 组件的生命周期钩子函数</span></span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="keyword">this</span>.$route.params.id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">    	&#123; <span class="attr">path</span>: <span class="string">'/login/:id/:name'</span>, <span class="attr">component</span>: login &#125;,</span><br><span class="line">    	&#123; <span class="attr">path</span>: <span class="string">'/register'</span>, <span class="attr">component</span>: register &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><ul>
<li>使用 <code>children</code> 属性实现子路由</li>
<li>子路由可以保留根路由的内容不被刷新掉</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account"</span>&gt;</span>Account<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tmpl"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是 Account 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/account/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 组件的模板对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> account = &#123; template: <span class="string">'#tmpl'</span> &#125;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> login = &#123; template: <span class="string">'&lt;h3&gt;登录&lt;/h3&gt;'</span> &#125;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> register = &#123; template: <span class="string">'&lt;h3&gt;注册&lt;/h3&gt;'</span> &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line"><span class="actionscript">        path: <span class="string">'/account'</span>,</span></span><br><span class="line">        component: account,</span><br><span class="line">        children: [</span><br><span class="line"><span class="actionscript">           &#123; path: <span class="string">'login'</span>, component: login &#125;,</span></span><br><span class="line"><span class="actionscript">           &#123; path: <span class="string">'register'</span>, component: register &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用 children 属性实现子路由，子路由的 path 前面，不要带 / ，否则永远以根路径开始请求，这样不方便我们用户去理解URL地址</span></span></span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用命名视图实现经典布局"><a href="#使用命名视图实现经典布局" class="headerlink" title="使用命名视图实现经典布局"></a>使用命名视图实现经典布局</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">	height: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left &#123;</span><br><span class="line">    background-color: lightgreen;</span><br><span class="line">    flex: 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.main &#123;</span><br><span class="line">    background-color: lightpink;</span><br><span class="line">    flex: 8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--这就叫命名视图，name对应路由模板components--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  var header = &#123; template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Header头部区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>' &#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  var leftBox = &#123; template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>Left侧边栏区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>' &#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  var mainBox = &#123; template: '<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span>mainBox主体区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>' &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建路由对象</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span></span><br><span class="line">    routes: [</span><br><span class="line"><span class="actionscript">      <span class="comment">// &#123; path: '/', component: header &#125;,</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// &#123; path: '/left', component: leftBox &#125;,</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// &#123; path: '/main', component: mainBox &#125; </span></span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="actionscript">        path: <span class="string">'/'</span>, </span></span><br><span class="line"><span class="actionscript">          <span class="comment">// 使用components，表示多个组件模板</span></span></span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="actionscript">          <span class="string">'default'</span>: header,</span></span><br><span class="line"><span class="actionscript">          <span class="string">'left'</span>: leftBox,</span></span><br><span class="line"><span class="actionscript">          <span class="string">'main'</span>: mainBox</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    router</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Ajax-axios"><a href="#Ajax-axios" class="headerlink" title="Ajax(axios)"></a>Ajax(axios)</h2><ul>
<li>推荐使用 axios 来完成 ajax 请求，Axios 是一个基于 Promise 的 HTTP 库</li>
<li>使用github<a href="https://github.com/axios/axios" target="_blank" rel="noopener">地址</a>将<code>axios.min.js</code>文件下载下来即可使用<br>或者在项目中使用<code>npm install axios --save</code><br>或者在线使用<code>&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></li>
<li>vue2.x时广泛应用</li>
<li>这部分是核心关键，但具体用法因人而异比较灵活</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET方法</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      info: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .get(<span class="string">'https://www.runoob.com/try/ajax/json_demo.json'</span>)<span class="comment">// 链式操作</span></span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="keyword">this</span>.info = response))	<span class="comment">// 请求到信息response</span></span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; <span class="comment">// 请求失败处理，使用catch捕获</span></span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 response.data 读取 JSON 数据</span></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;h1&gt;网站列表&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div</span></span><br><span class="line"><span class="regexp">    v-for="site in info"</span></span><br><span class="line"><span class="regexp">  &gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123; site.name &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type = "text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">new Vue(&#123;</span></span><br><span class="line"><span class="string">  el: '#app',</span></span><br><span class="line"><span class="string">  data () &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      info: null</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  mounted () &#123;</span></span><br><span class="line"><span class="string">    axios</span></span><br><span class="line"><span class="string">      .get('https://www.runoob.com/try/ajax/json_demo.json')</span></span><br><span class="line"><span class="string">      .then(response =&gt; (this.info = response.data.sites))// 箭头函数</span></span><br><span class="line"><span class="string">      .catch(function (error) &#123; // 请求失败处理</span></span><br><span class="line"><span class="string">        console.log(error);</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// GET 方法传递参数格式如下</span></span><br><span class="line"><span class="string">	// 直接在 URL 上添加参数 ID=12345</span></span><br><span class="line"><span class="string">axios.get('/user?ID=12345')</span></span><br><span class="line"><span class="string">  .then(function (response) &#123;// 匿名函数</span></span><br><span class="line"><span class="string">    console.log(response);</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">  .catch(function (error) &#123;</span></span><br><span class="line"><span class="string">    console.log(error);</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">	// 也可以通过 params 设置参数：比较推荐这种方式</span></span><br><span class="line"><span class="string">axios.get('/user', &#123;</span></span><br><span class="line"><span class="string">    params: &#123;</span></span><br><span class="line"><span class="string">      ID: 12345</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">  .then(function (response) &#123;</span></span><br><span class="line"><span class="string">    console.log(response);</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">  .catch(function (error) &#123;</span></span><br><span class="line"><span class="string">    console.log(error);</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br></pre></td></tr></table></figure>

<ul>
<li>请求就是要传递参数到服务器获取数据嘛</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// POST 方法</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      info: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    axios</span><br><span class="line">      .post(<span class="string">'https://www.runoob.com/try/ajax/demo_axios_post.php'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="keyword">this</span>.info = response))</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; <span class="comment">// 请求失败处理</span></span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递参数格式如下</span></span><br><span class="line">axios.post(<span class="string">'/user'</span>, &#123;	<span class="comment">// 不需要使用params</span></span><br><span class="line">    firstName: <span class="string">'Fred'</span>,        <span class="comment">// 参数 firstName</span></span><br><span class="line">    lastName: <span class="string">'Flintstone'</span>    <span class="comment">// 参数 lastName</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以用配置形式来创建请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios(config)</span><br><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method: <span class="string">'post'</span>,</span><br><span class="line">  url: <span class="string">'/user/12345'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  GET 请求远程图片</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  method:<span class="string">'get'</span>,</span><br><span class="line">  url:<span class="string">'http://bit.ly/2mTM3nY'</span>,</span><br><span class="line">  responseType:<span class="string">'stream'</span>		<span class="comment">// get方法还是要使用params</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">  response.data.pipe(fs.createWriteStream(<span class="string">'ada_lovelace.jpg'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 GET 请求（默认的方法）</span></span><br><span class="line">axios(<span class="string">'/user/12345'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求方法的别名</span></span><br><span class="line">axios.request(config)</span><br><span class="line">axios.get(url[, config])</span><br><span class="line">axios.delete(url[, config])</span><br><span class="line">axios.head(url[, config])</span><br><span class="line">axios.post(url[, data[, config]])</span><br><span class="line">axios.put(url[, data[, config]])</span><br><span class="line">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行多个并发请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</span><br><span class="line">&#125;</span><br><span class="line">axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 两个请求现在都执行完成</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<ul>
<li>请求配置项</li>
<li>拦截器：在被 then 或者 catch 处理之前截取请求或响应</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use（<span class="function"><span class="keyword">function</span>（<span class="title">config</span>）</span>&#123;</span><br><span class="line">     <span class="comment">//在发送请求之前做点事</span></span><br><span class="line">     <span class="keyword">return</span> config;</span><br><span class="line">   &#125;，<span class="function"><span class="keyword">function</span>（<span class="title">error</span>）</span>&#123;</span><br><span class="line">     <span class="comment">//请求错误时做点事</span></span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject（error）;</span><br><span class="line">   &#125;）;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use（<span class="function"><span class="keyword">function</span>（<span class="title">response</span>）</span>&#123;</span><br><span class="line">     <span class="comment">//对响应数据做点事</span></span><br><span class="line">     <span class="keyword">return</span> response;</span><br><span class="line">   &#125;，<span class="function"><span class="keyword">function</span>（<span class="title">error</span>）</span>&#123;</span><br><span class="line">     <span class="comment">//请求错误时做些事</span></span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject（error）;</span><br><span class="line">   &#125;）;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果有问题可以仔细看一下官方文档<code>http://www.axios-js.com/zh-cn/docs/</code></li>
</ul>
</li>
</ul>
<h2 id="Ajax-vue-resource"><a href="#Ajax-vue-resource" class="headerlink" title="Ajax(vue-resource)"></a>Ajax(vue-resource)</h2><ul>
<li>一款vue插件，用于处理ajax请求，vue1.x时广泛应用，现不被维护</li>
<li>所以就先不学了</li>
</ul>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2019/10/06/Vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Vue学习"><a href="#Vue学习" class="headerlink" title="Vue学习"></a>Vue学习</h1><ul>
<li>教程：Vue官网打广告那个教程真是不敢恭维</li>
<li>菜鸟<a href="https://www.runoob.com/vue2/vue-tutorial.html" target="_blank" rel="noopener">教程</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>作为一款构建前端用户界面的JavaScript框架，我们只需要新建.html文件并引入Vue.js文件即可</p>
<ul>
<li>Vue<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a></li>
<li>编辑器使用Sublime或者其他</li>
<li>其他的安装方法和应用构建参看教程</li>
</ul>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul>
<li><p>创建一个Vue实例，并绑定页面元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将来 new 的Vue实例，会控制这个元素中的所有内容 --&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- &#123;&#123;var&#125;&#125; 叫做插值表达式，输出data属性中的数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg3&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg4&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 也可以通过vm.msg直接访问data属性中的数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建一个Vue的实例</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;<span class="comment">// el、data等可以称之为属性</span></span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,  <span class="comment">// 指明要控制页面上的id为app的区域</span></span></span><br><span class="line"><span class="actionscript">      data: &#123; <span class="comment">// 存放 el 中要用到的数据</span></span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">'Hello Vue!'</span>, <span class="comment">// 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上，不需要手动操作DOM元素了</span></span></span><br><span class="line"><span class="actionscript">        msg2: <span class="string">'Hello Vue2!'</span>,<span class="comment">// 前端的Vue之类的框架，不提倡我们去手动操作DOM元素 </span></span></span><br><span class="line"><span class="actionscript">        msg3: <span class="string">'Hello Vue3!'</span>,</span></span><br><span class="line"><span class="actionscript">        msg4: <span class="string">'Hello Vue4!'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码可以在谷歌浏览器打开，使用自带的开发者查看并调试</p>
</li>
<li><p><code>v-cloak</code>可以解决在网速慢的情况下，插值表达式在浏览器中闪烁的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用<code>v-text</code>同样可以解决闪烁的问题，区别在哪？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>从Vue对象获取数据：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>从Vue对象获取数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行这段代码我们会发现下面的p标签只输出msg变量的值。即插值表达式可以把Vue传递过来的数据和前台用户自己定义的数据结合在一起，但是v-text只能显示Vue对象传递过来的数据，会替换掉节点里已有的内容</p>
</li>
</ul>
</li>
<li><p><code>v-html</code>可以解析html的标签并展示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里不会显示标签里的内容“Vue”--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app2'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">        msg: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>哈哈，我是一个大大的H1， 我大，我骄傲<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-bind:xxx</code>绑定Vue实例中的属性</p>
</li>
<li><p><code>v-on:xxx</code>绑定实例中的方法<code>methods</code>，即事件监听指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意： v-bind: 指令可以被简写为 冒号+要绑定的属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-bind:title 作用是鼠标放置在按钮上时的提示文字；指定为mytitle后，还可以拼接其他字符串--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vue.js 都提供了完全的 JavaScript 表达式支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mytitle + 'hello'"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">:title</span>=<span class="string">"mytitle"</span> <span class="attr">v-on:click</span>=<span class="string">"show2"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-on: 绑定方法，可以简写为 @ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮@"</span> @<span class="attr">click</span>=<span class="string">"show3"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app2'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">    msg: <span class="string">'123'</span>,</span></span><br><span class="line"><span class="actionscript">    mytitle: <span class="string">'这是一个自己定义的title'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    methods: &#123; <span class="comment">// 这个 methods属性中定义了当前Vue实例所有可用的方法</span></span></span><br><span class="line"><span class="actionscript">      show2: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      show3()&#123;</span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 可以直接操作data属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul>
<li><p>为 v-on 提供了事件修饰符来处理 DOM 事件细节</p>
</li>
<li><p><code>.stop</code>阻止事件冒泡</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click</span>=<span class="string">"divHandler"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click.stop</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.prevent</code>阻止标签默认行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"linkClick"</span>&gt;</span>有问题去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.capture</code>实现捕获触发事件的机制</p>
<ul>
<li>当元素发生冒泡时，先触发带有该修饰符的元素。若有多个该修饰符，则由外而内触发</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--弹出的顺序为：obj1、obj2、obj4、obj3；由于1，2有修饰符，故而先触发事件，然后就是4本身触发，最后冒泡事件。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj1"</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">        obj1</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj2"</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">            obj2</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj3"</span> <span class="attr">v-on:click</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">                obj3</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj4"</span> <span class="attr">v-on:click</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">                obj4</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.self</code>只有点击当前元素时候，才会触发事件处理函数</p>
<ul>
<li>可以理解为只会阻止来到自己身上的冒泡事件，不受别人影响，但<code>.stop</code>是通知所有冒泡事件</li>
</ul>
</li>
<li><p><code>.once</code>只触发一次事件处理函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent.once</span>=<span class="string">"linkClick"</span>&gt;</span>有问题，先去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul>
<li><p>监听键盘事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 enter 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">//全部别名:</span><br><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获 "删除" 和 "退格" 键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">.ctrl</span><br><span class="line">.alt</span><br><span class="line">.shift</span><br><span class="line">.meta</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>v-show</code>与<code>v-if</code>的区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是用v-if控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若flag=false，则样式切换为display:none，而不是消失 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是用v-show控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-model</code>实现双向绑定</p>
<ul>
<li>即同时实现<code>data</code>属性中的数据渲染和修改</li>
</ul>
</li>
<li><p>自动绑定表单元素的相关标签<code>value</code>值，更新修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind 只能实现数据的单向绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"msg"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： v-model 只能运用在 表单元素中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        msg: <span class="string">'大家都是好学生，爱敲代码，爱学习，爱思考，简直是完美！'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过双向数据绑定，实现表单上的应用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>单个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--for 属性规定 label 与哪个表单元素绑定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>多个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"baidu"</span> <span class="attr">value</span>=<span class="string">"Baidu"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"baidu"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"taobao"</span> <span class="attr">value</span>=<span class="string">"Taobao"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"taobao"</span>&gt;</span>taobao<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    checked : <span class="literal">false</span>,</span></span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>选择一个网站<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.baidu.com"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.google.com"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span></span><br><span class="line">      选择的网站是: &#123;&#123;selected&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    selected: <span class="string">''</span> </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"runoob"</span> <span class="attr">value</span>=<span class="string">"Baidu"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"runoob"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中值为: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    picked : <span class="string">'Runoob'</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ul>
<li><p><code>:class</code>和<code>:style</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.thin</span> &#123;</span></span><br><span class="line">      font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.italic</span> &#123;</span></span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">letter-spacing</span>: 0<span class="selector-class">.5em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red thin"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一种使用方式，直接传递一个数组，注意： 这里的 class 需要使用  v-bind 做数据绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['thin', 'italic']"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用三元表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['thin', 'italic', flag?'active':'']"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用 对象来代替三元表达式，提高代码的可读性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['thin', 'italic', &#123;'active':flag&#125; ]"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于对象的属性可带引号，也可不带引号，所以这里我没写引号； 属性的值是一个标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"classObj"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        flag: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        classObj: &#123; red: <span class="literal">true</span>, thin: <span class="literal">true</span>, italic: <span class="literal">false</span>, active: <span class="literal">false</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 对象就是键值对的集合 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"styleObj1"</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 可以使用数组--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[ styleObj1, styleObj2 ]"</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动	侦测并添加相应的前 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        styleObj1: &#123; color: <span class="string">'red'</span>, <span class="string">'font-weight'</span>: <span class="number">200</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        styleObj2: &#123; <span class="string">'font-style'</span>: <span class="string">'italic'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul>
<li><p>循环普通数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in list"</span>&gt;</span>索引值：&#123;&#123;i&#125;&#125; --- 元素：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>循环对象数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(user, i) in list"</span>&gt;</span>Id：&#123;&#123; user.id &#125;&#125; --- 名字：&#123;&#123; user.name &#125;&#125; --- 索引：&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">1</span>, name: <span class="string">'zs1'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">2</span>, name: <span class="string">'zs2'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">3</span>, name: <span class="string">'zs3'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">4</span>, name: <span class="string">'zs4'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：都是遍历实例data属性中的数据</p>
</li>
<li><p>循环对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意：在遍历对象身上的键值对的时候， 除了有val key ,在第三个位置还有 一个 索引 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(val, key, i) in user"</span>&gt;</span>值是： &#123;&#123; val &#125;&#125; --- 键是： &#123;&#123;key&#125;&#125; -- 索引： &#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        id: 1,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'托尼·赵四'</span>,</span></span><br><span class="line"><span class="actionscript">        gender: <span class="string">'男'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- in 后面可以放普通数组，对象数组，对象，还可以放数字 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意：如果使用 v-for 迭代数字的话，前面的 count 值从 1 开始 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"count in 10"</span>&gt;</span>这是第 &#123;&#123; count &#125;&#125; 次循环<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在使用for循环操作标签时，需要注意</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在一些特殊情况中，如果 v-for 有问题，必须在使用 v-for 的同时，指定唯一的 字符串/数字类型 :key 值，使用v-bind绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul>
<li><p>用作一些常见的文本格式化。由”管道符”指示, 格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在两个大括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 v-bind 指令中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    message: <span class="string">'runoob'</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line"><span class="actionscript">    capitalize: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">      value = value.toString()</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 字符串第一个字母转为大写</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>过滤器可以串联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>过滤器是 JavaScript 函数，因此可以接受参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#39;arg1&#39;, arg2) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F; message 是第一个参数，&#39;arg1&#39; 作为第二个参数， arg2 表达式的值将被求值然后作为第三个参数</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul>
<li><p>在处理一些复杂逻辑时很有用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用computed关键字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    message: <span class="string">'Roykun!'</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 相当于新的属性变量</span></span></span><br><span class="line"><span class="actionscript">    reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// `this` 指向 vm 实例</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>和methods方法在效果上一样，但是computed 是基于它的依赖缓存，可以说使用 computed 性能会更好，但是会产生缓存</p>
</li>
<li><p>默认的computed只有<code>get</code>属性，可以编写<code>set</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: 'Google',</span><br><span class="line">    url: 'http://www.google.com'</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    site: &#123;</span><br><span class="line">      // getter</span><br><span class="line">      get: function () &#123;</span><br><span class="line">        return this.name + ' ' + this.url</span><br><span class="line">      &#125;,</span><br><span class="line">      // setter</span><br><span class="line">      set: function (newValue) &#123;	// 接收传值</span><br><span class="line">        var names = newValue.split(' ')</span><br><span class="line">        this.name = names[0]</span><br><span class="line">        this.url = names[names.length - 1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 调用 setter， vm.name 和 vm.url 也会被对应更新</span><br><span class="line">vm.site = '菜鸟教程 http://www.baidu.com';</span><br><span class="line">document.write('name: ' + vm.name);</span><br><span class="line">document.write('<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span><br><span class="line">document.write('url: ' + vm.url);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="watch监听"><a href="#watch监听" class="headerlink" title="watch监听"></a><code>watch</code>监听</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接在这写表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"counter++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        counter: 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="actionscript"><span class="comment">// $watch 是一个实例方法</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 这个回调将在 vm.counter 改变后调用</span></span></span><br><span class="line"><span class="actionscript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span><span class="params">(newVal, oldVal)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'计数器值的变化 :'</span> + oldVal + <span class="string">' 变为 '</span> + newVal + <span class="string">'!'</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"computed_props"</span>&gt;</span></span><br><span class="line">    千米 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">v-model</span> = <span class="string">"kilometers"</span>&gt;</span></span><br><span class="line">    米 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">v-model</span> = <span class="string">"meters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#computed_props'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        kilometers : 0,</span><br><span class="line">        meters:0</span><br><span class="line">    &#125;,</span><br><span class="line">    watch : &#123;</span><br><span class="line"><span class="actionscript">        kilometers:<span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.kilometers = val;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.meters = <span class="keyword">this</span>.kilometers * <span class="number">1000</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        meters : <span class="function"><span class="keyword">function</span> <span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.kilometers = val/ <span class="number">1000</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.meters = val;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">// $watch 是一个实例方法</span></span></span><br><span class="line"><span class="actionscript">    vm.$watch(<span class="string">'kilometers'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(newValue, oldValue)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这个回调将在 vm.kilometers 改变后调用</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById (<span class="string">"info"</span>).innerHTML = <span class="string">"修改前值为: "</span> + oldValue + <span class="string">"，修改后值为: "</span> + newValue;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>全栈</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
