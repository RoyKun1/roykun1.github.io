<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>想知道Hexo&amp;next的操作吗？</title>
    <url>/2020/02/27/%E6%83%B3%E7%9F%A5%E9%81%93Hexo-next%E7%9A%84%E6%93%8D%E4%BD%9C%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="使用Hexo-next个性化自己的github博客"><a href="#使用Hexo-next个性化自己的github博客" class="headerlink" title="使用Hexo+next个性化自己的github博客"></a>使用Hexo+next个性化自己的github博客</h2><ul>
<li>这篇文章会告诉你怎么做<blockquote>
<p><a href="http://mashirosorata.vicp.io/" target="_blank" rel="noopener">http://mashirosorata.vicp.io/</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>How to use Hexo</title>
    <url>/2020/02/27/How-to-use-Hexo/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>作为学习PythonWeb的入门，依托github搭建个人博客，以后的项目代码和笔记均托管在这里。由于静态网站加载快易被搜索引擎检索到，我们使用hexo(a fast simple&amp;powerful blog framework)搭建框架。</li>
</ul>
<h2 id="二、站点搭建"><a href="#二、站点搭建" class="headerlink" title="二、站点搭建"></a>二、站点搭建</h2><h3 id="1-git-amp-GitHub"><a href="#1-git-amp-GitHub" class="headerlink" title="1. git &amp; GitHub"></a>1. git &amp; GitHub</h3><ul>
<li><p>系统学习了git，自己的github账号：</p>
<blockquote>
<p><a href="https://github.com/RoyKun1" target="_blank" rel="noopener">https://github.com/RoyKun1</a></p>
</blockquote>
</li>
<li><p>搭建网站需要建立名为/roykun1.github.io的git仓库，可以访问：</p>
<blockquote>
<p><a href="https://roykun1.github.io/" target="_blank" rel="noopener">https://roykun1.github.io/</a></p>
</blockquote>
<h3 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2. Hexo"></a>2. Hexo</h3><blockquote>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/</a></p>
</blockquote>
</li>
<li><p>可以参考这个教程学习：</p>
<blockquote>
<p><a href="https://blog.csdn.net/u011475210/article/details/79023429#%E5%89%8D%E8%A8%80" target="_blank" rel="noopener">https://blog.csdn.net/u011475210/article/details/79023429#%E5%89%8D%E8%A8%80</a></p>
</blockquote>
</li>
</ul>
<h4 id="ensp-ensp-Hexo的优点"><a href="#ensp-ensp-Hexo的优点" class="headerlink" title="&ensp;&ensp;Hexo的优点"></a>&ensp;&ensp;Hexo的优点</h4><ul>
<li><p>支持Markdown格式</p>
</li>
<li><p>有众多优秀插件和主题</p>
</li>
<li><p>文档完善</p>
<h4 id="ensp-ensp-安装和使用"><a href="#ensp-ensp-安装和使用" class="headerlink" title="&ensp;&ensp;安装和使用"></a>&ensp;&ensp;安装和使用</h4></li>
<li><p>安装node.js</p>
<ol>
<li><p>官网下载：<br><code>https://nodejs.org/en/download/</code></p>
</li>
<li><p>选择LTS版本，选择偶数的NodeJS版本，例如：8、10，因为偶数是长期稳定版本，有较好的兼容性。</p>
</li>
<li><p>双击运行安装包，其他默认就好</p>
</li>
<li><p>查看版本： win R; node -v    <code>10.16.3</code></p>
</li>
<li><p>新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理</p>
</li>
<li><p>需要进行一些环境变量的配置：<code>https://blog.csdn.net/cai454692590/article/details/86093297</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![](https:&#x2F;&#x2F;i.imgur.com&#x2F;z9Cnjew.png)</span><br><span class="line">由于markdown的国内服务器好像被屏蔽，需要翻q才能显示</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>安装hexo</p>
<ol>
<li>在git bash中使用命令： <code>npm install -g hexo-cli</code></li>
<li>查看是否安装成功：<code>hexo -v</code> 在bash中command not found，但是在cmd中是可以的<br>解决这个问题：使用管理员身份运行git bash</li>
</ol>
</li>
<li><p>使用hexo新建站点</p>
<ol>
<li><p>新建目录githubBlog</p>
</li>
<li><p>使用命令：<code>hexo init ./githubBlog</code> 由于bash有问题，在cmd中执行；执行成功会显示<code>INFO  Start blogging with Hexo!</code></p>
</li>
<li><p>进入目录，执行命令：<br> <code>npm install</code>或者<code>sudo npm install</code></p>
</li>
<li><p>启动服务：<code>hexo server</code><br>会有提示信息：<code>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code><br>我们访问这个地址即可看到hexo为我们初始化的界面！</p>
</li>
<li><p>将代码上传到github站点<br>首先要清空之前的上传：<br>&ensp;&ensp;<code>settings-&gt;delete repository</code><br>在githubBlog目录下安装一个插件：<br>&ensp;&ensp;<code>npm i -save hexo-deployer-git</code><br>在生成的文件_config.yml最后写入如下代码：</p>
<pre><code>deploy:
    type: git
    repo: https://github.com/RoyKun1/roykun1.github.io
    branch: master  </code></pre><p>在目录下执行：<br>&ensp;&ensp;<code>hexo d -g</code><br>进入隐藏目录：.deploy_git，声明github账号：由于我们已经在本地生成了密钥传至github，所以此时已经将代码传至，使用 <code>https://roykun1.github.io</code> 访问      </p>
</li>
<li><p>新建文章<br>使用命令： <code>hexo new &quot;我的第一篇博客&quot;</code> ，出现信息： <code>INFO  Created: D:\gitwork\githubBlog\source\_posts\我的第一篇博客.md</code></p>
</li>
<li><p>更换主题<br>官方主题：<code>https://hexo.io/themes/</code><br>如果我们喜欢其他的主题比如：<code>https://github.com/CodeDaraW/Hacker</code> 将源码下载到本地直接放在themes目录下面；然后执行 <code>hexo clean</code> 清楚缓存；再使用 <code>hexo d -g</code> 上传部署即可  </p>
<ul>
<li>注：可能需要等一会儿样式才会刷新出来，并不需要将themes进行add/commit<br>我们可以使用next定义博客的风格样式：<br><code>http://theme-next.iissnan.com/third-party-services.html</code></li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="三、编写个人博客"><a href="#三、编写个人博客" class="headerlink" title="三、编写个人博客"></a>三、编写个人博客</h2><blockquote>
<p>使用命令：<code>hexo new &quot;title&quot;</code>即可创建文章，一般在source/_post文件夹下<br>头部包含时间、标签，可以修改<br>编辑好文章后使用<code>hexo clean</code>和<code>hexo d -g</code>提交即可</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Thinkphp6——数据库</title>
    <url>/2019/12/28/Thinkphp6%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Thinkphp6——数据库"><a href="#Thinkphp6——数据库" class="headerlink" title="Thinkphp6——数据库"></a>Thinkphp6——数据库</h1><ul>
<li>ThinkPHP6 数据库和模型操作已经独立为ThinkORM库</li>
<li>要使用Db类必须使用门面方式（ <code>think\facade\Db</code> ）调用</li>
<li>数据库操作统一入口： <code>Db::</code></li>
</ul>
<p>我们可以在Navicat工具——查询中执行SQL命令，例如：</p>
<ul>
<li>创建数据库<br><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImages/navicat.png" alt=""></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;shop_cat&#96;;</span><br><span class="line">CREATE TABLE &#96;shop_cat&#96; (</span><br><span class="line">    &#96;id&#96; int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;ID&#39;,</span><br><span class="line">    &#96;name&#96; varchar(50) NOT NULL COMMENT &#39;分类名&#39;,</span><br><span class="line">    &#96;status&#96; tinyint(1) unsigned NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;状态 1开启 2关闭&#39;,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM AUTO_INCREMENT&#x3D;8 DEFAULT CHARSET&#x3D;utf8mb4 COMMENT&#x3D;&#39;分类表&#39;;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (1, &#39;女装&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (2, &#39;男装&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (3, &#39;孕产&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (4, &#39;童装&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (5, &#39;电视&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (6, &#39;手机&#39;, 1);</span><br><span class="line">INSERT INTO &#96;shop_cat&#96; VALUES (7, &#39;电脑&#39;, 1);</span><br></pre></td></tr></table></figure>

<h2 id="执行原生sql语句"><a href="#执行原生sql语句" class="headerlink" title="执行原生sql语句"></a>执行原生sql语句</h2><ol>
<li><p><code>query</code> 方法用于执行 MySql 查询操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $query = Db::query(<span class="string">"SELECT * FROM `shop_goods` where status=1"</span>);</span><br><span class="line">    print_r($query);	<span class="comment">// 返回值为二维数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>execute</code> 方法用于执行 MySql 新增和修改操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $execute = Db::execute(<span class="string">"INSERT INTO `shop_goods` VALUES (3, 1, '2019秋冬连衣裙女', 1179.00, 0, 200, 1, 1576080000)"</span>);	<span class="comment">// 使用insert into 插入</span></span><br><span class="line">    print_r($execute);</span><br><span class="line">    $execute = Db::execute(<span class="string">"UPDATE `shop_goods` set `price`='1100' where `id`=3 "</span>);		<span class="comment">// 使用update更新</span></span><br><span class="line">    print_r($execute);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="tp自带数据库操作方法"><a href="#tp自带数据库操作方法" class="headerlink" title="tp自带数据库操作方法"></a>tp自带数据库操作方法</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ol>
<li><p>单条数据查询 <code>find</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $find = Db::table(<span class="string">'shop_goods'</span>)-&gt;find(<span class="number">5</span>);</span><br><span class="line">    print_r($find);		<span class="comment">//find 方法查询结果不存在，返回 null，否则返回一维数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：我们一般只需关注查询操作的返回值类型</p>
</li>
<li><p>多条数据查询 <code>select</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $select = Db::table(<span class="string">'shop_goods'</span>)-&gt;select();</span><br><span class="line">    print_r($select);	<span class="comment">// 返回结果是object对象，可以转换为数组；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取单条记录(某行)某个字段的值 <code>value</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $value = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>==<span class="number">1007</span>)value(<span class="string">'title'</span>);</span><br><span class="line">    print_r($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询某一列的值<code>column</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $column = Db::table(<span class="string">'shop_goods'</span>)-&gt;column(<span class="string">'title'</span>);</span><br><span class="line">    print_r($column);</span><br><span class="line">    $column = Db::table(<span class="string">'shop_goods'</span>)-&gt;column(<span class="string">'title'</span>,<span class="string">'id'</span>);</span><br><span class="line">    print_r($column);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ol>
<li><p>添加一条数据 <code>insert</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'日系小浪漫连衣裙'</span>,<span class="string">'price'</span>=&gt;<span class="string">'1598.35'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>];</span><br><span class="line">    $insert = Db::table(<span class="string">'shop_goods'</span>)-&gt;insert($data);	<span class="comment">//返回添加成功的条数，通常情况返回 1</span></span><br><span class="line">    print_r($insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一条数据<code>insertGetId</code></p>
<ul>
<li><code>insertGetId</code> 返回添加数据的自增主键(一般为id值嘛)</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'针织毛衣裙女'</span>,<span class="string">'price'</span>=&gt;<span class="string">'690.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>];</span><br><span class="line">    $insert = Db::table(<span class="string">'shop_goods'</span>)-&gt;insertGetId($data);</span><br><span class="line">    print_r($insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加多条数据 <code>insertAll</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [</span><br><span class="line">        [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'内裤'</span>,<span class="string">'price'</span>=&gt;<span class="string">'658.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>],</span><br><span class="line">        [<span class="string">'cat'</span>=&gt;<span class="string">'1'</span>,<span class="string">'title'</span>=&gt;<span class="string">'秋裤'</span>,<span class="string">'price'</span>=&gt;<span class="string">'408.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>],</span><br><span class="line">        [<span class="string">'cat'</span>=&gt;<span class="string">'2'</span>,<span class="string">'title'</span>=&gt;<span class="string">' 小丁'</span>,<span class="string">'price'</span>=&gt;<span class="string">'99.00'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>]</span><br><span class="line">    ];</span><br><span class="line">    $insert = Db::table(<span class="string">'shop_goods'</span>)-&gt;insertAll($data);</span><br><span class="line">    print_r($insert);	<span class="comment">// 返回添加成功的条数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ol>
<li><p>修改数据 <code>update</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $data = [<span class="string">'price'</span>=&gt;<span class="string">'68'</span>];</span><br><span class="line">    $update = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">8</span>)-&gt;update($data);</span><br><span class="line">    print_r($update);	<span class="comment">// 返回影响数据的条数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>inc</code>方法自增一个字段的值</p>
<ul>
<li>就是方便一点而已</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $inc = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">5</span>)-&gt;inc(<span class="string">'stock'</span>)-&gt;update();</span><br><span class="line">    print_r($inc);</span><br><span class="line">    $inc = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">6</span>)-&gt;inc(<span class="string">'stock'</span>,<span class="number">5</span>)-&gt;update();</span><br><span class="line">    print_r($inc);	<span class="comment">// # 字段的值增加5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dec</code> 自减一个字段的值</li>
</ul>
</li>
</ol>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol>
<li><p>删除数据 <code>delete</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment"># 根据条件删除数据</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="number">1</span>)-&gt;delete();</span><br><span class="line">    print_r($delete);</span><br><span class="line">    <span class="comment"># 删除主键为2的数据</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;delete(<span class="number">2</span>);	<span class="comment">// 参数为主键值</span></span><br><span class="line">    print_r($delete);</span><br><span class="line">    <span class="comment"># 删除整表数据</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;delete(<span class="keyword">true</span>);</span><br><span class="line">    print_r($delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>软删除 <code>useSoftDelete</code></p>
<ul>
<li>业务数据不建议真实删除数据，TP系统提供了软删除机制</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment"># 软删除</span></span><br><span class="line">    $delete = Db::table(<span class="string">'shop_goods'</span>)-&gt;useSoftDelete(<span class="string">'status'</span>,<span class="number">3</span>)-&gt;delete();</span><br><span class="line">    print_r($delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul>
<li><p><code>save</code> 方法统一写入数据，自动判断是新增还是更新数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">$data = [<span class="string">'cat'</span>=&gt;<span class="string">'2'</span>,<span class="string">'title'</span>=&gt;<span class="string">'美特斯邦威七分牛仔裤女2018夏季新款中腰修身洗水牛仔裤商场款'</span>,<span class="string">'price'</span>=&gt;<span class="string">'49.90'</span>,<span class="string">'add_time'</span>=&gt;<span class="number">1576080000</span>];</span><br><span class="line">$save = Db::table(<span class="string">'shop_goods'</span>)-&gt;save($data);</span><br><span class="line">print_r($save);</span><br><span class="line"><span class="comment"># 修改数据</span></span><br><span class="line">$data = [<span class="string">'price'</span>=&gt;<span class="string">'99.00'</span>,<span class="string">'id'</span>=&gt;<span class="number">3</span>];</span><br><span class="line">$save = Db::table(<span class="string">'shop_goods'</span>)-&gt;save($data);</span><br><span class="line">print_r($save);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Thinkphp提供了很多处理数据集的方法"><a href="#Thinkphp提供了很多处理数据集的方法" class="headerlink" title="Thinkphp提供了很多处理数据集的方法"></a><code>Thinkphp</code>提供了很多处理数据集的方法</h2><ul>
<li>前面介绍了原生和tp6中的数据库CURD操作，对查询到的数据集也封装了很多方法处理，这些相当于工具，后面介绍工具使用的常用方法——链式操作</li>
</ul>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>toArray</td>
<td>转换为数组</td>
</tr>
<tr>
<td>isEmpty</td>
<td>是否为空</td>
</tr>
<tr>
<td>all</td>
<td>所有数据</td>
</tr>
<tr>
<td>merge</td>
<td>合并其它数据</td>
</tr>
<tr>
<td>diff</td>
<td>比较数组，返回差集</td>
</tr>
<tr>
<td>flip</td>
<td>交换数据中的键和值</td>
</tr>
<tr>
<td>intersect</td>
<td>比较数组，返回交集</td>
</tr>
<tr>
<td>keys</td>
<td>返回数据中的所有键名</td>
</tr>
<tr>
<td>pop</td>
<td>删除数据中的最后一个元素</td>
</tr>
<tr>
<td>shift</td>
<td>删除数据中的第一个元素</td>
</tr>
<tr>
<td>unshift</td>
<td>在数据开头插入一个元素</td>
</tr>
<tr>
<td>push</td>
<td>在结尾插入一个元素</td>
</tr>
<tr>
<td>reduce</td>
<td>通过使用用户自定义函数，以字符串返回数组</td>
</tr>
<tr>
<td>reverse</td>
<td>数据倒序重排</td>
</tr>
<tr>
<td>chunk</td>
<td>数据分隔为多个数据块</td>
</tr>
<tr>
<td>each</td>
<td>给数据的每个元素执行回调</td>
</tr>
<tr>
<td>filter</td>
<td>用回调函数过滤数据中的元素</td>
</tr>
<tr>
<td>column</td>
<td>返回数据中的指定列</td>
</tr>
<tr>
<td>sort</td>
<td>对数据排序</td>
</tr>
<tr>
<td>order</td>
<td>指定字段排序</td>
</tr>
<tr>
<td>shuffle</td>
<td>将数据打乱</td>
</tr>
<tr>
<td>slice</td>
<td>截取数据中的一部分</td>
</tr>
<tr>
<td>map</td>
<td>用回调函数处理数组中的元素</td>
</tr>
<tr>
<td>where</td>
<td>根据字段条件过滤数组中的元素</td>
</tr>
<tr>
<td>whereLike</td>
<td>Like查询过滤元素</td>
</tr>
<tr>
<td>whereNotLike</td>
<td>Not Like过滤元素</td>
</tr>
<tr>
<td>whereIn</td>
<td>IN查询过滤数组中的元素</td>
</tr>
<tr>
<td>whereNotIn</td>
<td>Not IN查询过滤数组中的元素</td>
</tr>
<tr>
<td>whereBetween</td>
<td>Between查询过滤数组中的元素</td>
</tr>
<tr>
<td>whereNotBetween</td>
<td>Not Between查询过滤数组中的元素</td>
</tr>
</tbody></table>
<p>注：看看就行，常用<code>toArray()</code>等</p>
<h1 id="数据库链式操作"><a href="#数据库链式操作" class="headerlink" title="数据库链式操作"></a>数据库链式操作</h1><ul>
<li><p>链式操作即<strong><em>增删改查</em></strong>配合<strong><em>新定义的方法</em></strong>在一条语句中完成对数据的多种操作</p>
</li>
<li><p>数据库提供的链式操作方法，可以有效的提高数据存取的代码清晰度和开发效率</p>
<table>
<thead>
<tr>
<th><strong>连贯操作</strong></th>
<th><strong>作用</strong></th>
<th><strong>支持的参数类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>where*</td>
<td>用于AND查询</td>
<td>字符串、数组和对象</td>
</tr>
<tr>
<td>table</td>
<td>用于定义要操作的数据表名称</td>
<td>字符串和数组</td>
</tr>
<tr>
<td>name</td>
<td>用于定义要操作的数据表名称</td>
<td>字符串</td>
</tr>
<tr>
<td>field*</td>
<td>用于定义要查询的字段（支持字段排除）</td>
<td>字符串和数组</td>
</tr>
<tr>
<td>order*</td>
<td>用于对结果排序</td>
<td>字符串和数组</td>
</tr>
<tr>
<td>limit</td>
<td>用于限制查询结果数量</td>
<td>字符串和数字</td>
</tr>
<tr>
<td>page</td>
<td>用于查询分页（内部会转换成limit）</td>
<td>字符串和数字</td>
</tr>
</tbody></table>
<p>注：带*标识的表示支持多次调用</p>
</li>
<li><p>还有很多其他方法，下面将介绍主要方法</p>
</li>
<li><p>链式操作一般配合<strong><em>表达式</em></strong>使用，表达式写在<code>where</code>里：</p>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th><strong>含义</strong></th>
<th><strong>查询方法</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
<td></td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
<td></td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td></td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td></td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td></td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td></td>
</tr>
<tr>
<td>[NOT] LIKE</td>
<td>模糊查询</td>
<td>whereLike/whereNotLike</td>
</tr>
<tr>
<td>[NOT] BETWEEN</td>
<td>（不在）区间查询</td>
<td>whereBetween/whereNotBetween</td>
</tr>
<tr>
<td>[NOT] IN</td>
<td>（不在）IN 查询</td>
<td>whereIn/whereNotIn</td>
</tr>
<tr>
<td>[NOT] NULL</td>
<td>查询字段是否（不）是NULL</td>
<td>whereNull/whereNotNull</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="where查询"><a href="#where查询" class="headerlink" title="where查询"></a><code>where</code>查询</h2><ul>
<li><p><code>where</code>方法在链式操作方法里面是最常用的方法，可以完成包括普通查询、表达式查询、快捷查询、区间查询、组合查询在内的条件查询操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'='</span>,<span class="string">'1'</span>)-&gt;select();</span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>,<span class="string">'&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'id'</span>,<span class="string">'&lt;'</span>,<span class="string">'8'</span>)</span><br><span class="line">            -&gt;select();</span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'title'</span>,<span class="string">'like'</span>,<span class="string">'%连衣裙%'</span>)-&gt;select();	<span class="comment">// 模糊查询</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'title'</span>,<span class="string">'not like'</span>,<span class="string">'%连衣裙%'</span>)-&gt;select();</span><br><span class="line"></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'not between'</span>,[<span class="number">6</span>,<span class="number">10</span>])-&gt;select();</span><br><span class="line"></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'in'</span>,<span class="string">'4,7,10'</span>)-&gt;select();	<span class="comment">// [4,7,10]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="field"><a href="#field" class="headerlink" title="field"></a><code>field</code></h2><ul>
<li><p>主要作用是设定要返回或者操作的字段，可以用于查询和写入操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,discount as d'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;select();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="order"><a href="#order" class="headerlink" title="order"></a><code>order</code></h2><ul>
<li><p>对操作的结果排序或者优先级限制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;order(<span class="string">'price'</span>,<span class="string">'DESC'</span>)</span><br><span class="line">            -&gt;order(<span class="string">'id'</span>,<span class="string">'DESC'</span>)	<span class="comment">// DESC 降序</span></span><br><span class="line">            -&gt;select();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a><code>limit</code></h2><ul>
<li><p>主要用于指定查询和操作的数量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;order(<span class="string">'price'</span>,<span class="string">'DESC'</span>)	<span class="comment">// 可以先使用order</span></span><br><span class="line">            -&gt;limit(<span class="number">0</span>,<span class="number">5</span>)	<span class="comment">// 从0开始，查询5条数据（不包括0）</span></span><br><span class="line">    		-&gt;limit(<span class="number">4</span>)		<span class="comment">// 从第4行开始查询后面所有行（不包括4）</span></span><br><span class="line">            -&gt;select();		<span class="comment">// $offset	$rowNums</span></span><br><span class="line"></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)</span><br><span class="line">            -&gt;field(<span class="string">'title,price,id'</span>)</span><br><span class="line">            -&gt;where(<span class="string">'status'</span>,<span class="number">1</span>)</span><br><span class="line">            -&gt;order(<span class="string">'price'</span>,<span class="string">'DESC'</span>)</span><br><span class="line">            -&gt;page(<span class="number">1</span>,<span class="number">5</span>)		<span class="comment">// page 方法主要用于分页查询</span></span><br><span class="line">            -&gt;select();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><ul>
<li><p>使用聚合方法的查询</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th align="center"><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td>max</td>
<td align="center">获取最大值，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>min</td>
<td align="center">获取最小值，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>avg</td>
<td align="center">获取平均值，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>sum</td>
<td align="center">获取总数，参数是要统计的字段名（必须）</td>
</tr>
<tr>
<td>count</td>
<td align="center">统计数量，参数是要统计的字段名（可选）</td>
</tr>
</tbody></table>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取最小值，参数是要统计的字段名（必须）</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;min(<span class="string">'id'</span>);</span><br><span class="line">print_r($select);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取平均值，参数是要统计的字段名（必须）</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;avg(<span class="string">'id'</span>);</span><br><span class="line">print_r($select);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>注：在涉及到数据库操作的时候，往往需要结合php的一些原生方法，例如<code>isset()</code>等</p>
<h2 id="数据表-table-和-name"><a href="#数据表-table-和-name" class="headerlink" title="数据表 table 和 name"></a>数据表 <code>table</code> 和 <code>name</code></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用table必须完整数据库名</span></span><br><span class="line">$select = Db::table(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'10'</span>)-&gt;select();</span><br><span class="line">print_r($select-&gt;toArray());</span><br><span class="line"><span class="comment"># 使用name数据库需要设置前缀，就可以不用写前缀</span></span><br><span class="line">$select = Db::name(<span class="string">'shop_goods'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'11'</span>)-&gt;select();</span><br><span class="line">print_r($select-&gt;toArray());</span><br><span class="line"><span class="comment"># 数据库设置前缀，无前缀访问</span></span><br><span class="line">$select = Db::name(<span class="string">'list'</span>)-&gt;where(<span class="string">'id'</span>,<span class="string">'12'</span>)-&gt;select();</span><br><span class="line">print_r($select-&gt;toArray());</span><br></pre></td></tr></table></figure>

<ul>
<li>前缀设置在database.php文件中</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'connections'</span>     =&gt; [</span><br><span class="line">        <span class="string">'mysql'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 数据库表前缀</span></span><br><span class="line">            <span class="string">'prefix'</span>  =&gt; Env::get(<span class="string">'database.prefix'</span>, <span class="string">'shop_'</span>),</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>



<p>加油</p>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImages/sponge_baby.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp6——项目配置</title>
    <url>/2019/12/27/Thinkphp6%E2%80%94%E2%80%94%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Thinkphp6——项目配置"><a href="#Thinkphp6——项目配置" class="headerlink" title="Thinkphp6——项目配置"></a>Thinkphp6——项目配置</h1><ul>
<li>Config目录下面是tp6的常规配置，可以自定义配置并引入</li>
<li>配置一般均以return返回</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">├─config（配置目录）</span><br><span class="line">│  ├─app.php            应用配置</span><br><span class="line">│  ├─cache.php          缓存配置</span><br><span class="line">│  ├─console.php        控制台配置</span><br><span class="line">│  ├─cookie.php         Cookie配置</span><br><span class="line">│  ├─database.php       数据库配置</span><br><span class="line">│  ├─filesystem.php     文件磁盘配置</span><br><span class="line">│  ├─lang.php           多语言配置</span><br><span class="line">│  ├─log.php            日志配置</span><br><span class="line">│  ├─middleware.php     中间件配置</span><br><span class="line">│  ├─route.php          URL和路由配置</span><br><span class="line">│  ├─session.php        Session配置</span><br><span class="line">│  ├─trace.php          Trace配置</span><br><span class="line">│  ├─view.php           视图配置</span><br><span class="line">│  └─ ...               更多配置文件</span><br></pre></td></tr></table></figure>

<p>这里只介绍重点的配置文件</p>
<h2 id="模板配置view-php"><a href="#模板配置view-php" class="headerlink" title="模板配置view.php"></a>模板配置view.php</h2><ul>
<li>在这里可以对模板引擎做个性化的定制，但是要保证统一（代码习惯）</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 模板引擎类型使用Think</span></span><br><span class="line">    <span class="string">'type'</span>          =&gt; <span class="string">'Think'</span>,</span><br><span class="line">    <span class="comment">// 默认模板渲染规则 1 解析为小写+下划线 2 全部转换小写 3 保持操作方法</span></span><br><span class="line">    <span class="string">'auto_rule'</span>     =&gt; <span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 模板目录名</span></span><br><span class="line">    <span class="string">'view_dir_name'</span> =&gt; <span class="string">'view'</span>,</span><br><span class="line">    <span class="comment">// 模板后缀</span></span><br><span class="line">    <span class="string">'view_suffix'</span>   =&gt; <span class="string">'html'</span>,</span><br><span class="line">    <span class="comment">// 模板文件名分隔符</span></span><br><span class="line">    <span class="string">'view_depr'</span>     =&gt; DIRECTORY_SEPARATOR,</span><br><span class="line">    <span class="comment">// 模板引擎普通标签开始标记</span></span><br><span class="line">    <span class="string">'tpl_begin'</span>     =&gt; <span class="string">'&#123;'</span>,</span><br><span class="line">    <span class="comment">// 模板引擎普通标签结束标记</span></span><br><span class="line">    <span class="string">'tpl_end'</span>       =&gt; <span class="string">'&#125;'</span>,</span><br><span class="line">    <span class="comment">// 标签库标签开始标记</span></span><br><span class="line">    <span class="string">'taglib_begin'</span>  =&gt; <span class="string">'&#123;'</span>,</span><br><span class="line">    <span class="comment">// 标签库标签结束标记</span></span><br><span class="line">    <span class="string">'taglib_end'</span>    =&gt; <span class="string">'&#125;'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h2 id="env-环境变量定义"><a href="#env-环境变量定义" class="headerlink" title="env 环境变量定义"></a><code>env</code> 环境变量定义</h2><ul>
<li>默认安装后的根目录有一个.example.env环境变量示例文件，改成.env文件后生效</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">APP_DEBUG = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">[APP]</span><br><span class="line">DEFAULT_TIMEZONE = Asia/Shanghai</span><br><span class="line"></span><br><span class="line">[DATABASE]		<span class="comment">// 以下是对于数据库的默认值设置</span></span><br><span class="line">TYPE = mysql	<span class="comment">// 如果在database.php中进行设置则会覆盖</span></span><br><span class="line">HOSTNAME = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">DATABASE = test</span><br><span class="line">USERNAME = username</span><br><span class="line">PASSWORD = password</span><br><span class="line">HOSTPORT = <span class="number">3306</span></span><br><span class="line">CHARSET = utf8</span><br><span class="line">DEBUG = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">[LANG]</span><br><span class="line">default_lang = zh-cn</span><br></pre></td></tr></table></figure>

<ul>
<li><p>要使用env，必须先引入 <code>think\facade\Env</code> 门面类</p>
</li>
<li><p>环境变量的获取不区分大小写</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/RoyKun1/ImageUploads/master/HexoImages/database.png" alt=""></p>
]]></content>
      <tags>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>Thinkphp6——环境配置篇</title>
    <url>/2019/12/25/Thinkphp6%E2%80%94%E2%80%94%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%AF%87/</url>
    <content><![CDATA[<h1 id="thinkphp6基础笔记-连载"><a href="#thinkphp6基础笔记-连载" class="headerlink" title="thinkphp6基础笔记[连载]"></a>thinkphp6基础笔记[连载]</h1><h2 id="环境配置篇"><a href="#环境配置篇" class="headerlink" title="环境配置篇"></a>环境配置篇</h2><p>主流的PHP框架有Laravel，Thinkphp，Yii，作为一款国产轻量级的中型框架，有易于上手，有丰富的中文文档，框架的兼容性较强等优点，目前已更新至tp6。</p>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><ul>
<li><p><code>6.0</code> 版本开始，必须通过 <code>Composer</code> 方式安装和更新，无法通过 <code>Git</code> 下载安装。</p>
</li>
<li><p>PHP &gt;= 7.1.0</p>
<p>在windows中，<a href="https://getcomposer.org/Composer-Setup.exe" target="_blank" rel="noopener">下载Composer软件</a></p>
<blockquote>
<p>第一步：双击下载好的composer运行程序<br>第二步：选择要安装的盘符<br>第三步：选择php版本。如果你是集成包环境，就到集成包里找php<br>第四步：全部下一步</p>
</blockquote>
<p>设置 Composer 下载源</p>
<ul>
<li>先设置 <code>Composer</code> 的下载源，也是镜像地址</li>
<li>在命令行窗口或控制台 输入</li>
</ul>
<blockquote>
<p>composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a></p>
</blockquote>
<ul>
<li>国外的网站速度慢，官网建议使用国内镜像（阿里云）</li>
</ul>
<blockquote>
<p>composer config -g repo.packagist composer <a href="https://mirrors.aliyun.com/composer" target="_blank" rel="noopener">https://mirrors.aliyun.com/composer</a></p>
</blockquote>
<p>安装ThinkPHP6</p>
<ul>
<li>先切换到你自己的php环境根目录</li>
</ul>
<blockquote>
<p>cd d:/phpstudy/www</p>
</blockquote>
<ul>
<li>在执行下载<code>Thinkphp6</code>命令。最后的tp6，是新建的tp6目录，可自行更改</li>
</ul>
<blockquote>
<p>composer create-project topthink/think tp</p>
</blockquote>
<ul>
<li>更新<code>Thinkphp6</code>核心</li>
</ul>
<blockquote>
<p>composer update topthink/framework</p>
</blockquote>
<ul>
<li>注：安装和更新命令所在的目录是不同的，更新必须在你的应用根目录下面执行</li>
</ul>
<p>目录结构</p>
<ul>
<li><p>6.0版本目录结构的主要变化是核心框架纳入<code>vendor</code>目录，然后原来的<code>application</code>目录变成<code>app</code>目录。</p>
</li>
<li><p>安装后的目录结构就是一个单应用模式</p>
</li>
<li><p>在 <code>mac</code> 或者 <code>linux</code> 环境下面，注意需要设置 <code>runtime</code> 目录权限为777</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www  WEB部署目录（或者子目录）</span><br><span class="line">├─app           应用目录</span><br><span class="line">│  ├─controller      控制器目录</span><br><span class="line">│  ├─model           模型目录</span><br><span class="line">│  ├─ ...            更多类库目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─common.php         公共函数文件</span><br><span class="line">│  └─event.php          事件定义文件</span><br><span class="line">│</span><br><span class="line">├─config                配置目录</span><br><span class="line">│  ├─app.php            应用配置</span><br><span class="line">│  ├─cache.php          缓存配置</span><br><span class="line">│  ├─console.php        控制台配置</span><br><span class="line">│  ├─cookie.php         Cookie配置</span><br><span class="line">│  ├─database.php       数据库配置</span><br><span class="line">│  ├─filesystem.php     文件磁盘配置</span><br><span class="line">│  ├─lang.php           多语言配置</span><br><span class="line">│  ├─log.php            日志配置</span><br><span class="line">│  ├─middleware.php     中间件配置</span><br><span class="line">│  ├─route.php          URL和路由配置</span><br><span class="line">│  ├─session.php        Session配置</span><br><span class="line">│  ├─trace.php          Trace配置</span><br><span class="line">│  └─view.php           视图配置</span><br><span class="line">│</span><br><span class="line">├─view            视图目录</span><br><span class="line">├─route                 路由定义目录</span><br><span class="line">│  ├─route.php          路由定义文件</span><br><span class="line">│  └─ ...</span><br><span class="line">│</span><br><span class="line">├─public                WEB目录（对外访问目录）</span><br><span class="line">│  ├─index.php          入口文件</span><br><span class="line">│  ├─router.php         快速测试文件</span><br><span class="line">│  └─.htaccess          用于apache的重写</span><br><span class="line">│</span><br><span class="line">├─extend                扩展类库目录</span><br><span class="line">├─runtime               应用的运行时目录（可写，可定制）</span><br><span class="line">├─vendor                Composer类库目录</span><br><span class="line">├─.example.env          环境变量示例文件</span><br><span class="line">├─composer.json         composer 定义文件</span><br><span class="line">├─LICENSE.txt           授权说明文件</span><br><span class="line">├─README.md             README 文件</span><br><span class="line">├─think                 命令行入口文件</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>运行<code>Thinkphp6</code></p>
<ul>
<li>我使用的是集成环境phpStudy，编辑器sublime，数据库管理工具Navicat</li>
<li>在Windows中，在C:\Windows\System32\drivers\etc 目录下，打开 hosts文件，设置虚拟域名</li>
<li>在集成环境——站点管理中将入口执行tp6/public目录下即可</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>thinkphp6</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2019/10/06/Vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Vue学习"><a href="#Vue学习" class="headerlink" title="Vue学习"></a>Vue学习</h1><ul>
<li>教程：Vue官网打广告那个教程真是不敢恭维</li>
<li>菜鸟<a href="https://www.runoob.com/vue2/vue-tutorial.html" target="_blank" rel="noopener">教程</a></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>作为一款构建前端用户界面的JavaScript框架，我们只需要新建.html文件并引入Vue.js文件即可</p>
<ul>
<li>Vue<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a></li>
<li>编辑器使用Sublime或者其他</li>
<li>其他的安装方法和应用构建参看教程</li>
</ul>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul>
<li><p>创建一个Vue实例，并绑定页面元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将来 new 的Vue实例，会控制这个元素中的所有内容 --&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- &#123;&#123;var&#125;&#125; 叫做插值表达式，输出data属性中的数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg3&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg4&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 也可以通过vm.msg直接访问data属性中的数据 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建一个Vue的实例</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;<span class="comment">// el、data等可以称之为属性</span></span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,  <span class="comment">// 指明要控制页面上的id为app的区域</span></span></span><br><span class="line"><span class="actionscript">      data: &#123; <span class="comment">// 存放 el 中要用到的数据</span></span></span><br><span class="line"><span class="actionscript">        msg: <span class="string">'Hello Vue!'</span>, <span class="comment">// 通过 Vue 提供的指令，很方便的就能把数据渲染到页面上，不需要手动操作DOM元素了</span></span></span><br><span class="line"><span class="actionscript">        msg2: <span class="string">'Hello Vue2!'</span>,<span class="comment">// 前端的Vue之类的框架，不提倡我们去手动操作DOM元素 </span></span></span><br><span class="line"><span class="actionscript">        msg3: <span class="string">'Hello Vue3!'</span>,</span></span><br><span class="line"><span class="actionscript">        msg4: <span class="string">'Hello Vue4!'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码可以在谷歌浏览器打开，使用自带的开发者查看并调试</p>
</li>
<li><p><code>v-cloak</code>可以解决在网速慢的情况下，插值表达式在浏览器中闪烁的问题</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用<code>v-text</code>同样可以解决闪烁的问题，区别在哪？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>从Vue对象获取数据：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span>从Vue对象获取数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行这段代码我们会发现下面的p标签只输出msg变量的值。即插值表达式可以把Vue传递过来的数据和前台用户自己定义的数据结合在一起，但是v-text只能显示Vue对象传递过来的数据，会替换掉节点里已有的内容</p>
</li>
</ul>
</li>
<li><p><code>v-html</code>可以解析html的标签并展示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里不会显示标签里的内容“Vue”--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app2'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">        msg: '<span class="tag">&lt;<span class="name">h1</span>&gt;</span>哈哈，我是一个大大的H1， 我大，我骄傲<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>',</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-bind:xxx</code>绑定Vue实例中的属性</p>
</li>
<li><p><code>v-on:xxx</code>绑定实例中的方法<code>methods</code>，即事件监听指令</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意： v-bind: 指令可以被简写为 冒号+要绑定的属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-bind 中，可以写合法的JS表达式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-bind:title 作用是鼠标放置在按钮上时的提示文字；指定为mytitle后，还可以拼接其他字符串--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vue.js 都提供了完全的 JavaScript 表达式支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mytitle + 'hello'"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">:title</span>=<span class="string">"mytitle"</span> <span class="attr">v-on:click</span>=<span class="string">"show2"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-on: 绑定方法，可以简写为 @ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮@"</span> @<span class="attr">click</span>=<span class="string">"show3"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app2'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">    msg: <span class="string">'123'</span>,</span></span><br><span class="line"><span class="actionscript">    mytitle: <span class="string">'这是一个自己定义的title'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    methods: &#123; <span class="comment">// 这个 methods属性中定义了当前Vue实例所有可用的方法</span></span></span><br><span class="line"><span class="actionscript">      show2: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      show3()&#123;</span><br><span class="line"><span class="actionscript">        alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 可以直接操作data属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ul>
<li><p>为 v-on 提供了事件修饰符来处理 DOM 事件细节</p>
</li>
<li><p><code>.stop</code>阻止事件冒泡</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span> @<span class="attr">click</span>=<span class="string">"divHandler"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"戳他"</span> @<span class="attr">click.stop</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.prevent</code>阻止标签默认行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent</span>=<span class="string">"linkClick"</span>&gt;</span>有问题去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.capture</code>实现捕获触发事件的机制</p>
<ul>
<li>当元素发生冒泡时，先触发带有该修饰符的元素。若有多个该修饰符，则由外而内触发</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--弹出的顺序为：obj1、obj2、obj4、obj3；由于1，2有修饰符，故而先触发事件，然后就是4本身触发，最后冒泡事件。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj1"</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">        obj1</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj2"</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">            obj2</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj3"</span> <span class="attr">v-on:click</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">                obj3</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"obj4"</span> <span class="attr">v-on:click</span>=<span class="string">"doc"</span>&gt;</span></span><br><span class="line">                obj4</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>.self</code>只有点击当前元素时候，才会触发事件处理函数</p>
<ul>
<li>可以理解为只会阻止来到自己身上的冒泡事件，不受别人影响，但<code>.stop</code>是通知所有冒泡事件</li>
</ul>
</li>
<li><p><code>.once</code>只触发一次事件处理函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> @<span class="attr">click.prevent.once</span>=<span class="string">"linkClick"</span>&gt;</span>有问题，先去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><ul>
<li><p>监听键盘事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 enter 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">//全部别名:</span><br><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获 "删除" 和 "退格" 键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">.ctrl</span><br><span class="line">.alt</span><br><span class="line">.shift</span><br><span class="line">.meta</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>v-show</code>与<code>v-if</code>的区别</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果元素涉及到频繁的切换，最好不要使用 v-if, 而是推荐使用 v-show --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果元素可能永远也不会被显示出来被用户看到，则推荐使用 v-if --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是用v-if控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若flag=false，则样式切换为display:none，而不是消失 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是用v-show控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-model</code>实现双向绑定</p>
<ul>
<li>即同时实现<code>data</code>属性中的数据渲染和修改</li>
</ul>
</li>
<li><p>自动绑定表单元素的相关标签<code>value</code>值，更新修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-bind 只能实现数据的单向绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"msg"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以实现 表单元素和 Model 中数据的双向数据绑定 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意： v-model 只能运用在 表单元素中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:100%;"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        msg: <span class="string">'大家都是好学生，爱敲代码，爱学习，爱思考，简直是完美！'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通过双向数据绑定，实现表单上的应用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>单个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--for 属性规定 label 与哪个表单元素绑定--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>多个复选框：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"baidu"</span> <span class="attr">value</span>=<span class="string">"Baidu"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"baidu"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"taobao"</span> <span class="attr">value</span>=<span class="string">"Taobao"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"taobao"</span>&gt;</span>taobao<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选择的值为: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    checked : <span class="literal">false</span>,</span></span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>选择一个网站<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.baidu.com"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"www.google.com"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"output"</span>&gt;</span></span><br><span class="line">      选择的网站是: &#123;&#123;selected&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    selected: <span class="string">''</span> </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"runoob"</span> <span class="attr">value</span>=<span class="string">"Baidu"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"runoob"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>选中值为: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    picked : <span class="string">'Runoob'</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><ul>
<li><code>:class</code>和<code>:style</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/vue-2.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.thin</span> &#123;</span></span><br><span class="line">      font-weight: 200;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.italic</span> &#123;</span></span><br><span class="line">      font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">letter-spacing</span>: 0<span class="selector-class">.5em</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red thin"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一种使用方式，直接传递一个数组，注意： 这里的 class 需要使用  v-bind 做数据绑定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['thin', 'italic']"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用三元表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['thin', 'italic', flag?'active':'']"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在数组中使用 对象来代替三元表达式，提高代码的可读性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['thin', 'italic', &#123;'active':flag&#125; ]"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在为 class 使用 v-bind 绑定 对象的时候，对象的属性是类名，由于对象的属性可带引号，也可不带引号，所以这里我没写引号； 属性的值是一个标识符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"classObj"</span>&gt;</span>这是一个很大很大的H1，大到你无法想象！！！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        flag: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        classObj: &#123; red: <span class="literal">true</span>, thin: <span class="literal">true</span>, italic: <span class="literal">false</span>, active: <span class="literal">false</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 对象就是键值对的集合 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"styleObj1"</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 可以使用数组--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[ styleObj1, styleObj2 ]"</span>&gt;</span>这是一个h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动	侦测并添加相应的前 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="actionscript">        styleObj1: &#123; color: <span class="string">'red'</span>, <span class="string">'font-weight'</span>: <span class="number">200</span> &#125;,</span></span><br><span class="line"><span class="actionscript">        styleObj2: &#123; <span class="string">'font-style'</span>: <span class="string">'italic'</span> &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul>
<li><p>循环普通数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in list"</span>&gt;</span>索引值：&#123;&#123;i&#125;&#125; --- 元素：&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>循环对象数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(user, i) in list"</span>&gt;</span>Id：&#123;&#123; user.id &#125;&#125; --- 名字：&#123;&#123; user.name &#125;&#125; --- 索引：&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">1</span>, name: <span class="string">'zs1'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">2</span>, name: <span class="string">'zs2'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">3</span>, name: <span class="string">'zs3'</span> &#125;,</span></span><br><span class="line"><span class="actionscript">          &#123; id: <span class="number">4</span>, name: <span class="string">'zs4'</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：都是遍历实例data属性中的数据</p>
</li>
<li><p>循环对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意：在遍历对象身上的键值对的时候， 除了有val key ,在第三个位置还有 一个 索引 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(val, key, i) in user"</span>&gt;</span>值是： &#123;&#123; val &#125;&#125; --- 键是： &#123;&#123;key&#125;&#125; -- 索引： &#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        id: 1,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'托尼·赵四'</span>,</span></span><br><span class="line"><span class="actionscript">        gender: <span class="string">'男'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- in 后面可以放普通数组，对象数组，对象，还可以放数字 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意：如果使用 v-for 迭代数字的话，前面的 count 值从 1 开始 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"count in 10"</span>&gt;</span>这是第 &#123;&#123; count &#125;&#125; 次循环<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在使用for循环操作标签时，需要注意</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在一些特殊情况中，如果 v-for 有问题，必须在使用 v-for 的同时，指定唯一的 字符串/数字类型 :key 值，使用v-bind绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123;item.id&#125;&#125; --- &#123;&#123;item.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><ul>
<li><p>用作一些常见的文本格式化。由”管道符”指示, 格式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在两个大括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 v-bind 指令中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    message: <span class="string">'runoob'</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line"><span class="actionscript">    capitalize: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">      value = value.toString()</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 字符串第一个字母转为大写</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>过滤器可以串联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>过滤器是 JavaScript 函数，因此可以接受参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#39;arg1&#39;, arg2) &#125;&#125;</span><br><span class="line">&#x2F;&#x2F; message 是第一个参数，&#39;arg1&#39; 作为第二个参数， arg2 表达式的值将被求值然后作为第三个参数</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul>
<li><p>在处理一些复杂逻辑时很有用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用computed关键字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>原始字符串: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    message: <span class="string">'Roykun!'</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 相当于新的属性变量</span></span></span><br><span class="line"><span class="actionscript">    reversedMessage: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// `this` 指向 vm 实例</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>和methods方法在效果上一样，但是computed 是基于它的依赖缓存，可以说使用 computed 性能会更好，但是会产生缓存</p>
</li>
<li><p>默认的computed只有<code>get</code>属性，可以编写<code>set</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: '#app',</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: 'Google',</span><br><span class="line">    url: 'http://www.google.com'</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    site: &#123;</span><br><span class="line">      // getter</span><br><span class="line">      get: function () &#123;</span><br><span class="line">        return this.name + ' ' + this.url</span><br><span class="line">      &#125;,</span><br><span class="line">      // setter</span><br><span class="line">      set: function (newValue) &#123;	// 接收传值</span><br><span class="line">        var names = newValue.split(' ')</span><br><span class="line">        this.name = names[0]</span><br><span class="line">        this.url = names[names.length - 1]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 调用 setter， vm.name 和 vm.url 也会被对应更新</span><br><span class="line">vm.site = '菜鸟教程 http://www.baidu.com';</span><br><span class="line">document.write('name: ' + vm.name);</span><br><span class="line">document.write('<span class="tag">&lt;<span class="name">br</span>&gt;</span>');</span><br><span class="line">document.write('url: ' + vm.url);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="watch监听"><a href="#watch监听" class="headerlink" title="watch监听"></a><code>watch</code>监听</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>计数器: &#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接在这写表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span> = <span class="string">"counter++"</span> <span class="attr">style</span> = <span class="string">"font-size:25px;"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        counter: 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="actionscript"><span class="comment">// $watch 是一个实例方法</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 这个回调将在 vm.counter 改变后调用</span></span></span><br><span class="line"><span class="actionscript">vm.$watch(<span class="string">'counter'</span>, <span class="function"><span class="keyword">function</span><span class="params">(newVal, oldVal)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'计数器值的变化 :'</span> + oldVal + <span class="string">' 变为 '</span> + newVal + <span class="string">'!'</span>);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"computed_props"</span>&gt;</span></span><br><span class="line">    千米 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">v-model</span> = <span class="string">"kilometers"</span>&gt;</span></span><br><span class="line">    米 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"text"</span> <span class="attr">v-model</span> = <span class="string">"meters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#computed_props'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        kilometers : 0,</span><br><span class="line">        meters:0</span><br><span class="line">    &#125;,</span><br><span class="line">    watch : &#123;</span><br><span class="line"><span class="actionscript">        kilometers:<span class="function"><span class="keyword">function</span><span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.kilometers = val;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.meters = <span class="keyword">this</span>.kilometers * <span class="number">1000</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        meters : <span class="function"><span class="keyword">function</span> <span class="params">(val)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.kilometers = val/ <span class="number">1000</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.meters = val;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">// $watch 是一个实例方法</span></span></span><br><span class="line"><span class="actionscript">    vm.$watch(<span class="string">'kilometers'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(newValue, oldValue)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这个回调将在 vm.kilometers 改变后调用</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById (<span class="string">"info"</span>).innerHTML = <span class="string">"修改前值为: "</span> + oldValue + <span class="string">"，修改后值为: "</span> + newValue;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>技能</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
